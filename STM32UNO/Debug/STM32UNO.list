
STM32UNO.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000028c0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08002a48  08002a48  00012a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS
  4 .ARM          00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002ad4  08002ad4  00020004  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002ad4  08002ad4  00012ad4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002ad8  08002ad8  00012ad8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000004  20000000  08002adc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000020  20000004  08002ae0  00020004  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000024  08002ae0  00020024  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020004  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000822a  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001b8b  00000000  00000000  000282a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a00  00000000  00000000  00029e30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000755  00000000  00000000  0002a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020b52  00000000  00000000  0002af85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008c62  00000000  00000000  0004bad7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000b2124  00000000  00000000  00054739  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002854  00000000  00000000  00106860  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  001090b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000004 	.word	0x20000004
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002a30 	.word	0x08002a30

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000008 	.word	0x20000008
 80001c4:	08002a30 	.word	0x08002a30

080001c8 <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001c8:	b480      	push	{r7}
 80001ca:	b083      	sub	sp, #12
 80001cc:	af00      	add	r7, sp, #0
 80001ce:	6078      	str	r0, [r7, #4]
 80001d0:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80001d2:	687b      	ldr	r3, [r7, #4]
 80001d4:	683a      	ldr	r2, [r7, #0]
 80001d6:	619a      	str	r2, [r3, #24]
}
 80001d8:	bf00      	nop
 80001da:	370c      	adds	r7, #12
 80001dc:	46bd      	mov	sp, r7
 80001de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001e2:	4770      	bx	lr

080001e4 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 80001e4:	b480      	push	{r7}
 80001e6:	b083      	sub	sp, #12
 80001e8:	af00      	add	r7, sp, #0
 80001ea:	6078      	str	r0, [r7, #4]
 80001ec:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 80001ee:	687b      	ldr	r3, [r7, #4]
 80001f0:	683a      	ldr	r2, [r7, #0]
 80001f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80001f4:	bf00      	nop
 80001f6:	370c      	adds	r7, #12
 80001f8:	46bd      	mov	sp, r7
 80001fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fe:	4770      	bx	lr

08000200 <GPIO_set>:
 */

#include "main.h"
#include "GPIO.h"

void GPIO_set(bool state, GPIO_TypeDef * GPIO_Port, uint32_t PIN){
 8000200:	b580      	push	{r7, lr}
 8000202:	b084      	sub	sp, #16
 8000204:	af00      	add	r7, sp, #0
 8000206:	4603      	mov	r3, r0
 8000208:	60b9      	str	r1, [r7, #8]
 800020a:	607a      	str	r2, [r7, #4]
 800020c:	73fb      	strb	r3, [r7, #15]
	if(state){
 800020e:	7bfb      	ldrb	r3, [r7, #15]
 8000210:	2b00      	cmp	r3, #0
 8000212:	d004      	beq.n	800021e <GPIO_set+0x1e>
		LL_GPIO_SetOutputPin(GPIO_Port, PIN);
 8000214:	6879      	ldr	r1, [r7, #4]
 8000216:	68b8      	ldr	r0, [r7, #8]
 8000218:	f7ff ffd6 	bl	80001c8 <LL_GPIO_SetOutputPin>
	}
	else{
		LL_GPIO_ResetOutputPin(GPIO_Port, PIN);
	}
}
 800021c:	e003      	b.n	8000226 <GPIO_set+0x26>
		LL_GPIO_ResetOutputPin(GPIO_Port, PIN);
 800021e:	6879      	ldr	r1, [r7, #4]
 8000220:	68b8      	ldr	r0, [r7, #8]
 8000222:	f7ff ffdf 	bl	80001e4 <LL_GPIO_ResetOutputPin>
}
 8000226:	bf00      	nop
 8000228:	3710      	adds	r7, #16
 800022a:	46bd      	mov	sp, r7
 800022c:	bd80      	pop	{r7, pc}

0800022e <LL_SPI_Enable>:
  * @rmtoll CR1          SPE           LL_SPI_Enable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Enable(SPI_TypeDef *SPIx)
{
 800022e:	b480      	push	{r7}
 8000230:	b083      	sub	sp, #12
 8000232:	af00      	add	r7, sp, #0
 8000234:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000236:	687b      	ldr	r3, [r7, #4]
 8000238:	681b      	ldr	r3, [r3, #0]
 800023a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800023e:	687b      	ldr	r3, [r7, #4]
 8000240:	601a      	str	r2, [r3, #0]
}
 8000242:	bf00      	nop
 8000244:	370c      	adds	r7, #12
 8000246:	46bd      	mov	sp, r7
 8000248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800024c:	4770      	bx	lr

0800024e <LL_SPI_Disable>:
  * @rmtoll CR1          SPE           LL_SPI_Disable
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_Disable(SPI_TypeDef *SPIx)
{
 800024e:	b480      	push	{r7}
 8000250:	b083      	sub	sp, #12
 8000252:	af00      	add	r7, sp, #0
 8000254:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000256:	687b      	ldr	r3, [r7, #4]
 8000258:	681b      	ldr	r3, [r3, #0]
 800025a:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 800025e:	687b      	ldr	r3, [r7, #4]
 8000260:	601a      	str	r2, [r3, #0]
}
 8000262:	bf00      	nop
 8000264:	370c      	adds	r7, #12
 8000266:	46bd      	mov	sp, r7
 8000268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800026c:	4770      	bx	lr

0800026e <LL_SPI_IsActiveFlag_BSY>:
  * @rmtoll SR           BSY           LL_SPI_IsActiveFlag_BSY
  * @param  SPIx SPI Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_SPI_IsActiveFlag_BSY(SPI_TypeDef *SPIx)
{
 800026e:	b480      	push	{r7}
 8000270:	b083      	sub	sp, #12
 8000272:	af00      	add	r7, sp, #0
 8000274:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_BSY) == (SPI_SR_BSY)) ? 1UL : 0UL);
 8000276:	687b      	ldr	r3, [r7, #4]
 8000278:	689b      	ldr	r3, [r3, #8]
 800027a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800027e:	2b80      	cmp	r3, #128	; 0x80
 8000280:	d101      	bne.n	8000286 <LL_SPI_IsActiveFlag_BSY+0x18>
 8000282:	2301      	movs	r3, #1
 8000284:	e000      	b.n	8000288 <LL_SPI_IsActiveFlag_BSY+0x1a>
 8000286:	2300      	movs	r3, #0
}
 8000288:	4618      	mov	r0, r3
 800028a:	370c      	adds	r7, #12
 800028c:	46bd      	mov	sp, r7
 800028e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000292:	4770      	bx	lr

08000294 <LL_SPI_GetRxFIFOLevel>:
  *         @arg @ref LL_SPI_RX_FIFO_QUARTER_FULL
  *         @arg @ref LL_SPI_RX_FIFO_HALF_FULL
  *         @arg @ref LL_SPI_RX_FIFO_FULL
  */
__STATIC_INLINE uint32_t LL_SPI_GetRxFIFOLevel(SPI_TypeDef *SPIx)
{
 8000294:	b480      	push	{r7}
 8000296:	b083      	sub	sp, #12
 8000298:	af00      	add	r7, sp, #0
 800029a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(SPIx->SR, SPI_SR_FRLVL));
 800029c:	687b      	ldr	r3, [r7, #4]
 800029e:	689b      	ldr	r3, [r3, #8]
 80002a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
}
 80002a4:	4618      	mov	r0, r3
 80002a6:	370c      	adds	r7, #12
 80002a8:	46bd      	mov	sp, r7
 80002aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002ae:	4770      	bx	lr

080002b0 <LL_SPI_ClearFlag_OVR>:
  * @rmtoll SR           OVR           LL_SPI_ClearFlag_OVR
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_ClearFlag_OVR(SPI_TypeDef *SPIx)
{
 80002b0:	b480      	push	{r7}
 80002b2:	b085      	sub	sp, #20
 80002b4:	af00      	add	r7, sp, #0
 80002b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  tmpreg = SPIx->DR;
 80002b8:	687b      	ldr	r3, [r7, #4]
 80002ba:	68db      	ldr	r3, [r3, #12]
 80002bc:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80002be:	68fb      	ldr	r3, [r7, #12]
  tmpreg = SPIx->SR;
 80002c0:	687b      	ldr	r3, [r7, #4]
 80002c2:	689b      	ldr	r3, [r3, #8]
 80002c4:	60fb      	str	r3, [r7, #12]
  (void) tmpreg;
 80002c6:	68fb      	ldr	r3, [r7, #12]
}
 80002c8:	bf00      	nop
 80002ca:	3714      	adds	r7, #20
 80002cc:	46bd      	mov	sp, r7
 80002ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002d2:	4770      	bx	lr

080002d4 <LL_SPI_EnableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_EnableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_EnableIT_TXE(SPI_TypeDef *SPIx)
{
 80002d4:	b480      	push	{r7}
 80002d6:	b083      	sub	sp, #12
 80002d8:	af00      	add	r7, sp, #0
 80002da:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	685b      	ldr	r3, [r3, #4]
 80002e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80002e4:	687b      	ldr	r3, [r7, #4]
 80002e6:	605a      	str	r2, [r3, #4]
}
 80002e8:	bf00      	nop
 80002ea:	370c      	adds	r7, #12
 80002ec:	46bd      	mov	sp, r7
 80002ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80002f2:	4770      	bx	lr

080002f4 <LL_SPI_DisableIT_RXNE>:
  * @rmtoll CR2          RXNEIE        LL_SPI_DisableIT_RXNE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_RXNE(SPI_TypeDef *SPIx)
{
 80002f4:	b480      	push	{r7}
 80002f6:	b083      	sub	sp, #12
 80002f8:	af00      	add	r7, sp, #0
 80002fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 80002fc:	687b      	ldr	r3, [r7, #4]
 80002fe:	685b      	ldr	r3, [r3, #4]
 8000300:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000304:	687b      	ldr	r3, [r7, #4]
 8000306:	605a      	str	r2, [r3, #4]
}
 8000308:	bf00      	nop
 800030a:	370c      	adds	r7, #12
 800030c:	46bd      	mov	sp, r7
 800030e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000312:	4770      	bx	lr

08000314 <LL_SPI_DisableIT_TXE>:
  * @rmtoll CR2          TXEIE         LL_SPI_DisableIT_TXE
  * @param  SPIx SPI Instance
  * @retval None
  */
__STATIC_INLINE void LL_SPI_DisableIT_TXE(SPI_TypeDef *SPIx)
{
 8000314:	b480      	push	{r7}
 8000316:	b083      	sub	sp, #12
 8000318:	af00      	add	r7, sp, #0
 800031a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	685b      	ldr	r3, [r3, #4]
 8000320:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000324:	687b      	ldr	r3, [r7, #4]
 8000326:	605a      	str	r2, [r3, #4]
}
 8000328:	bf00      	nop
 800032a:	370c      	adds	r7, #12
 800032c:	46bd      	mov	sp, r7
 800032e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000332:	4770      	bx	lr

08000334 <LL_SPI_ReceiveData8>:
  * @rmtoll DR           DR            LL_SPI_ReceiveData8
  * @param  SPIx SPI Instance
  * @retval RxData Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_SPI_ReceiveData8(SPI_TypeDef *SPIx)
{
 8000334:	b480      	push	{r7}
 8000336:	b083      	sub	sp, #12
 8000338:	af00      	add	r7, sp, #0
 800033a:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 800033c:	687b      	ldr	r3, [r7, #4]
 800033e:	330c      	adds	r3, #12
 8000340:	781b      	ldrb	r3, [r3, #0]
 8000342:	b2db      	uxtb	r3, r3
}
 8000344:	4618      	mov	r0, r3
 8000346:	370c      	adds	r7, #12
 8000348:	46bd      	mov	sp, r7
 800034a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800034e:	4770      	bx	lr

08000350 <LL_SPI_TransmitData8>:
  * @param  SPIx SPI Instance
  * @param  TxData Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_SPI_TransmitData8(SPI_TypeDef *SPIx, uint8_t TxData)
{
 8000350:	b480      	push	{r7}
 8000352:	b085      	sub	sp, #20
 8000354:	af00      	add	r7, sp, #0
 8000356:	6078      	str	r0, [r7, #4]
 8000358:	460b      	mov	r3, r1
 800035a:	70fb      	strb	r3, [r7, #3]
#if defined (__GNUC__)
  __IO uint8_t *spidr = ((__IO uint8_t *)&SPIx->DR);
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	330c      	adds	r3, #12
 8000360:	60fb      	str	r3, [r7, #12]
  *spidr = TxData;
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	78fa      	ldrb	r2, [r7, #3]
 8000366:	701a      	strb	r2, [r3, #0]
#else
  *((__IO uint8_t *)&SPIx->DR) = TxData;
#endif /* __GNUC__ */
}
 8000368:	bf00      	nop
 800036a:	3714      	adds	r7, #20
 800036c:	46bd      	mov	sp, r7
 800036e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000372:	4770      	bx	lr

08000374 <SPIInterruptSend>:

	LL_SPI_ClearFlag_OVR(spi);
}

//interrupt functions
void SPIInterruptSend (SPI_TypeDef *spi, uint8_t data){
 8000374:	b580      	push	{r7, lr}
 8000376:	b082      	sub	sp, #8
 8000378:	af00      	add	r7, sp, #0
 800037a:	6078      	str	r0, [r7, #4]
 800037c:	460b      	mov	r3, r1
 800037e:	70fb      	strb	r3, [r7, #3]
	LL_SPI_TransmitData8(spi, data);
 8000380:	78fb      	ldrb	r3, [r7, #3]
 8000382:	4619      	mov	r1, r3
 8000384:	6878      	ldr	r0, [r7, #4]
 8000386:	f7ff ffe3 	bl	8000350 <LL_SPI_TransmitData8>
}
 800038a:	bf00      	nop
 800038c:	3708      	adds	r7, #8
 800038e:	46bd      	mov	sp, r7
 8000390:	bd80      	pop	{r7, pc}
	...

08000394 <SPIInterrruptEnable>:

uint8_t SPIInterruptReceive (SPI_TypeDef *spi){
	return LL_SPI_ReceiveData8(spi);
}

void SPIInterrruptEnable (SPI_TypeDef *spi){
 8000394:	b580      	push	{r7, lr}
 8000396:	b082      	sub	sp, #8
 8000398:	af00      	add	r7, sp, #0
 800039a:	6078      	str	r0, [r7, #4]
	LL_SPI_Enable(spi);
 800039c:	6878      	ldr	r0, [r7, #4]
 800039e:	f7ff ff46 	bl	800022e <LL_SPI_Enable>
	GPIO_set(0, CS1_GPIO_Port, CS1_Pin);
 80003a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80003a6:	4905      	ldr	r1, [pc, #20]	; (80003bc <SPIInterrruptEnable+0x28>)
 80003a8:	2000      	movs	r0, #0
 80003aa:	f7ff ff29 	bl	8000200 <GPIO_set>
	LL_SPI_EnableIT_TXE(spi);
 80003ae:	6878      	ldr	r0, [r7, #4]
 80003b0:	f7ff ff90 	bl	80002d4 <LL_SPI_EnableIT_TXE>
}
 80003b4:	bf00      	nop
 80003b6:	3708      	adds	r7, #8
 80003b8:	46bd      	mov	sp, r7
 80003ba:	bd80      	pop	{r7, pc}
 80003bc:	48000800 	.word	0x48000800

080003c0 <SPIInterrruptDisable>:

void SPIInterrruptDisable (SPI_TypeDef *spi){
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b082      	sub	sp, #8
 80003c4:	af00      	add	r7, sp, #0
 80003c6:	6078      	str	r0, [r7, #4]
	LL_SPI_DisableIT_TXE(spi);
 80003c8:	6878      	ldr	r0, [r7, #4]
 80003ca:	f7ff ffa3 	bl	8000314 <LL_SPI_DisableIT_TXE>
	LL_SPI_DisableIT_RXNE(spi);
 80003ce:	6878      	ldr	r0, [r7, #4]
 80003d0:	f7ff ff90 	bl	80002f4 <LL_SPI_DisableIT_RXNE>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY);
 80003d4:	bf00      	nop
 80003d6:	6878      	ldr	r0, [r7, #4]
 80003d8:	f7ff ff5c 	bl	8000294 <LL_SPI_GetRxFIFOLevel>
 80003dc:	4603      	mov	r3, r0
 80003de:	2b00      	cmp	r3, #0
 80003e0:	d1f9      	bne.n	80003d6 <SPIInterrruptDisable+0x16>
	while (LL_SPI_IsActiveFlag_BSY(spi) != 0);
 80003e2:	bf00      	nop
 80003e4:	6878      	ldr	r0, [r7, #4]
 80003e6:	f7ff ff42 	bl	800026e <LL_SPI_IsActiveFlag_BSY>
 80003ea:	4603      	mov	r3, r0
 80003ec:	2b00      	cmp	r3, #0
 80003ee:	d1f9      	bne.n	80003e4 <SPIInterrruptDisable+0x24>

	LL_SPI_Disable(spi);
 80003f0:	6878      	ldr	r0, [r7, #4]
 80003f2:	f7ff ff2c 	bl	800024e <LL_SPI_Disable>

	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80003f6:	e002      	b.n	80003fe <SPIInterrruptDisable+0x3e>
	{
		LL_SPI_ReceiveData8(spi);
 80003f8:	6878      	ldr	r0, [r7, #4]
 80003fa:	f7ff ff9b 	bl	8000334 <LL_SPI_ReceiveData8>
	while (LL_SPI_GetRxFIFOLevel(spi) != LL_SPI_RX_FIFO_EMPTY)
 80003fe:	6878      	ldr	r0, [r7, #4]
 8000400:	f7ff ff48 	bl	8000294 <LL_SPI_GetRxFIFOLevel>
 8000404:	4603      	mov	r3, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d1f6      	bne.n	80003f8 <SPIInterrruptDisable+0x38>
	}

	LL_SPI_ClearFlag_OVR(spi);
 800040a:	6878      	ldr	r0, [r7, #4]
 800040c:	f7ff ff50 	bl	80002b0 <LL_SPI_ClearFlag_OVR>

	GPIO_set(1, CS1_GPIO_Port, CS1_Pin);
 8000410:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000414:	4903      	ldr	r1, [pc, #12]	; (8000424 <SPIInterrruptDisable+0x64>)
 8000416:	2001      	movs	r0, #1
 8000418:	f7ff fef2 	bl	8000200 <GPIO_set>
}
 800041c:	bf00      	nop
 800041e:	3708      	adds	r7, #8
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	48000800 	.word	0x48000800

08000428 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll ISR          TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(const USART_TypeDef *USARTx)
{
 8000428:	b480      	push	{r7}
 800042a:	b083      	sub	sp, #12
 800042c:	af00      	add	r7, sp, #0
 800042e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8000430:	687b      	ldr	r3, [r7, #4]
 8000432:	69db      	ldr	r3, [r3, #28]
 8000434:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000438:	2b80      	cmp	r3, #128	; 0x80
 800043a:	d101      	bne.n	8000440 <LL_USART_IsActiveFlag_TXE+0x18>
 800043c:	2301      	movs	r3, #1
 800043e:	e000      	b.n	8000442 <LL_USART_IsActiveFlag_TXE+0x1a>
 8000440:	2300      	movs	r3, #0
}
 8000442:	4618      	mov	r0, r3
 8000444:	370c      	adds	r7, #12
 8000446:	46bd      	mov	sp, r7
 8000448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044c:	4770      	bx	lr

0800044e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800044e:	b480      	push	{r7}
 8000450:	b083      	sub	sp, #12
 8000452:	af00      	add	r7, sp, #0
 8000454:	6078      	str	r0, [r7, #4]
 8000456:	460b      	mov	r3, r1
 8000458:	70fb      	strb	r3, [r7, #3]
  USARTx->TDR = Value;
 800045a:	78fb      	ldrb	r3, [r7, #3]
 800045c:	b29a      	uxth	r2, r3
 800045e:	687b      	ldr	r3, [r7, #4]
 8000460:	851a      	strh	r2, [r3, #40]	; 0x28
}
 8000462:	bf00      	nop
 8000464:	370c      	adds	r7, #12
 8000466:	46bd      	mov	sp, r7
 8000468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800046c:	4770      	bx	lr

0800046e <UsartSendByte>:
 */

#include "main.h"
#include "USART.h"

void UsartSendByte(USART_TypeDef* UART_PORT, uint8_t Value){
 800046e:	b580      	push	{r7, lr}
 8000470:	b082      	sub	sp, #8
 8000472:	af00      	add	r7, sp, #0
 8000474:	6078      	str	r0, [r7, #4]
 8000476:	460b      	mov	r3, r1
 8000478:	70fb      	strb	r3, [r7, #3]
	while(!LL_USART_IsActiveFlag_TXE(UART_PORT));
 800047a:	bf00      	nop
 800047c:	6878      	ldr	r0, [r7, #4]
 800047e:	f7ff ffd3 	bl	8000428 <LL_USART_IsActiveFlag_TXE>
 8000482:	4603      	mov	r3, r0
 8000484:	2b00      	cmp	r3, #0
 8000486:	d0f9      	beq.n	800047c <UsartSendByte+0xe>
	LL_USART_TransmitData8(UART_PORT, (uint8_t)Value);
 8000488:	78fb      	ldrb	r3, [r7, #3]
 800048a:	4619      	mov	r1, r3
 800048c:	6878      	ldr	r0, [r7, #4]
 800048e:	f7ff ffde 	bl	800044e <LL_USART_TransmitData8>
}
 8000492:	bf00      	nop
 8000494:	3708      	adds	r7, #8
 8000496:	46bd      	mov	sp, r7
 8000498:	bd80      	pop	{r7, pc}

0800049a <UsartSendString>:

void UsartSendString(USART_TypeDef* UART_PORT, uint8_t* Value){
 800049a:	b580      	push	{r7, lr}
 800049c:	b082      	sub	sp, #8
 800049e:	af00      	add	r7, sp, #0
 80004a0:	6078      	str	r0, [r7, #4]
 80004a2:	6039      	str	r1, [r7, #0]
	while(*Value != 0x00){
 80004a4:	e010      	b.n	80004c8 <UsartSendString+0x2e>
		if(*Value == '\n'){
 80004a6:	683b      	ldr	r3, [r7, #0]
 80004a8:	781b      	ldrb	r3, [r3, #0]
 80004aa:	2b0a      	cmp	r3, #10
 80004ac:	d103      	bne.n	80004b6 <UsartSendString+0x1c>
			UsartSendByte(UART_PORT, '\r');
 80004ae:	210d      	movs	r1, #13
 80004b0:	6878      	ldr	r0, [r7, #4]
 80004b2:	f7ff ffdc 	bl	800046e <UsartSendByte>
		}
		UsartSendByte(UART_PORT, *Value);
 80004b6:	683b      	ldr	r3, [r7, #0]
 80004b8:	781b      	ldrb	r3, [r3, #0]
 80004ba:	4619      	mov	r1, r3
 80004bc:	6878      	ldr	r0, [r7, #4]
 80004be:	f7ff ffd6 	bl	800046e <UsartSendByte>
		Value++;
 80004c2:	683b      	ldr	r3, [r7, #0]
 80004c4:	3301      	adds	r3, #1
 80004c6:	603b      	str	r3, [r7, #0]
	while(*Value != 0x00){
 80004c8:	683b      	ldr	r3, [r7, #0]
 80004ca:	781b      	ldrb	r3, [r3, #0]
 80004cc:	2b00      	cmp	r3, #0
 80004ce:	d1ea      	bne.n	80004a6 <UsartSendString+0xc>
	}
}
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	3708      	adds	r7, #8
 80004d6:	46bd      	mov	sp, r7
 80004d8:	bd80      	pop	{r7, pc}
	...

080004dc <UsartNewLine>:

void UsartNewLine(USART_TypeDef* UART_PORT){
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0
 80004e2:	6078      	str	r0, [r7, #4]
	UsartSendByte(USART2, '\n');
 80004e4:	210a      	movs	r1, #10
 80004e6:	4805      	ldr	r0, [pc, #20]	; (80004fc <UsartNewLine+0x20>)
 80004e8:	f7ff ffc1 	bl	800046e <UsartSendByte>
	UsartSendByte(USART2, '\r');
 80004ec:	210d      	movs	r1, #13
 80004ee:	4803      	ldr	r0, [pc, #12]	; (80004fc <UsartNewLine+0x20>)
 80004f0:	f7ff ffbd 	bl	800046e <UsartSendByte>
}
 80004f4:	bf00      	nop
 80004f6:	3708      	adds	r7, #8
 80004f8:	46bd      	mov	sp, r7
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	40004400 	.word	0x40004400

08000500 <LL_AHB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000500:	b480      	push	{r7}
 8000502:	b085      	sub	sp, #20
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000508:	4b08      	ldr	r3, [pc, #32]	; (800052c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800050a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800050c:	4907      	ldr	r1, [pc, #28]	; (800052c <LL_AHB2_GRP1_EnableClock+0x2c>)
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	4313      	orrs	r3, r2
 8000512:	64cb      	str	r3, [r1, #76]	; 0x4c
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000514:	4b05      	ldr	r3, [pc, #20]	; (800052c <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000516:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000518:	687b      	ldr	r3, [r7, #4]
 800051a:	4013      	ands	r3, r2
 800051c:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 800051e:	68fb      	ldr	r3, [r7, #12]
}
 8000520:	bf00      	nop
 8000522:	3714      	adds	r7, #20
 8000524:	46bd      	mov	sp, r7
 8000526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800052a:	4770      	bx	lr
 800052c:	40021000 	.word	0x40021000

08000530 <LL_SYSCFG_SetEXTISource>:
  *         @arg @ref LL_SYSCFG_EXTI_LINE14
  *         @arg @ref LL_SYSCFG_EXTI_LINE15
  * @retval None
  */
__STATIC_INLINE void LL_SYSCFG_SetEXTISource(uint32_t Port, uint32_t Line)
{
 8000530:	b480      	push	{r7}
 8000532:	b087      	sub	sp, #28
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
 8000538:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SYSCFG->EXTICR[Line & 0xFFU], (Line >> 16U), Port << POSITION_VAL((Line >> 16U)));
 800053a:	4a17      	ldr	r2, [pc, #92]	; (8000598 <LL_SYSCFG_SetEXTISource+0x68>)
 800053c:	683b      	ldr	r3, [r7, #0]
 800053e:	b2db      	uxtb	r3, r3
 8000540:	3302      	adds	r3, #2
 8000542:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000546:	683b      	ldr	r3, [r7, #0]
 8000548:	0c1b      	lsrs	r3, r3, #16
 800054a:	43db      	mvns	r3, r3
 800054c:	ea02 0103 	and.w	r1, r2, r3
 8000550:	683b      	ldr	r3, [r7, #0]
 8000552:	0c1b      	lsrs	r3, r3, #16
 8000554:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000556:	693b      	ldr	r3, [r7, #16]
 8000558:	fa93 f3a3 	rbit	r3, r3
 800055c:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800055e:	68fb      	ldr	r3, [r7, #12]
 8000560:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8000562:	697b      	ldr	r3, [r7, #20]
 8000564:	2b00      	cmp	r3, #0
 8000566:	d101      	bne.n	800056c <LL_SYSCFG_SetEXTISource+0x3c>
  {
    return 32U;
 8000568:	2320      	movs	r3, #32
 800056a:	e003      	b.n	8000574 <LL_SYSCFG_SetEXTISource+0x44>
  }
  return __builtin_clz(value);
 800056c:	697b      	ldr	r3, [r7, #20]
 800056e:	fab3 f383 	clz	r3, r3
 8000572:	b2db      	uxtb	r3, r3
 8000574:	461a      	mov	r2, r3
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	fa03 f202 	lsl.w	r2, r3, r2
 800057c:	4806      	ldr	r0, [pc, #24]	; (8000598 <LL_SYSCFG_SetEXTISource+0x68>)
 800057e:	683b      	ldr	r3, [r7, #0]
 8000580:	b2db      	uxtb	r3, r3
 8000582:	430a      	orrs	r2, r1
 8000584:	3302      	adds	r3, #2
 8000586:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 800058a:	bf00      	nop
 800058c:	371c      	adds	r7, #28
 800058e:	46bd      	mov	sp, r7
 8000590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop
 8000598:	40010000 	.word	0x40010000

0800059c <LL_GPIO_SetPinMode>:
{
 800059c:	b480      	push	{r7}
 800059e:	b08b      	sub	sp, #44	; 0x2c
 80005a0:	af00      	add	r7, sp, #0
 80005a2:	60f8      	str	r0, [r7, #12]
 80005a4:	60b9      	str	r1, [r7, #8]
 80005a6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	681a      	ldr	r2, [r3, #0]
 80005ac:	68bb      	ldr	r3, [r7, #8]
 80005ae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005b0:	697b      	ldr	r3, [r7, #20]
 80005b2:	fa93 f3a3 	rbit	r3, r3
 80005b6:	613b      	str	r3, [r7, #16]
  return result;
 80005b8:	693b      	ldr	r3, [r7, #16]
 80005ba:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80005bc:	69bb      	ldr	r3, [r7, #24]
 80005be:	2b00      	cmp	r3, #0
 80005c0:	d101      	bne.n	80005c6 <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 80005c2:	2320      	movs	r3, #32
 80005c4:	e003      	b.n	80005ce <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 80005c6:	69bb      	ldr	r3, [r7, #24]
 80005c8:	fab3 f383 	clz	r3, r3
 80005cc:	b2db      	uxtb	r3, r3
 80005ce:	005b      	lsls	r3, r3, #1
 80005d0:	2103      	movs	r1, #3
 80005d2:	fa01 f303 	lsl.w	r3, r1, r3
 80005d6:	43db      	mvns	r3, r3
 80005d8:	401a      	ands	r2, r3
 80005da:	68bb      	ldr	r3, [r7, #8]
 80005dc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80005de:	6a3b      	ldr	r3, [r7, #32]
 80005e0:	fa93 f3a3 	rbit	r3, r3
 80005e4:	61fb      	str	r3, [r7, #28]
  return result;
 80005e6:	69fb      	ldr	r3, [r7, #28]
 80005e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80005ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d101      	bne.n	80005f4 <LL_GPIO_SetPinMode+0x58>
    return 32U;
 80005f0:	2320      	movs	r3, #32
 80005f2:	e003      	b.n	80005fc <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 80005f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80005f6:	fab3 f383 	clz	r3, r3
 80005fa:	b2db      	uxtb	r3, r3
 80005fc:	005b      	lsls	r3, r3, #1
 80005fe:	6879      	ldr	r1, [r7, #4]
 8000600:	fa01 f303 	lsl.w	r3, r1, r3
 8000604:	431a      	orrs	r2, r3
 8000606:	68fb      	ldr	r3, [r7, #12]
 8000608:	601a      	str	r2, [r3, #0]
}
 800060a:	bf00      	nop
 800060c:	372c      	adds	r7, #44	; 0x2c
 800060e:	46bd      	mov	sp, r7
 8000610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000614:	4770      	bx	lr

08000616 <LL_GPIO_SetPinPull>:
{
 8000616:	b480      	push	{r7}
 8000618:	b08b      	sub	sp, #44	; 0x2c
 800061a:	af00      	add	r7, sp, #0
 800061c:	60f8      	str	r0, [r7, #12]
 800061e:	60b9      	str	r1, [r7, #8]
 8000620:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8000622:	68fb      	ldr	r3, [r7, #12]
 8000624:	68da      	ldr	r2, [r3, #12]
 8000626:	68bb      	ldr	r3, [r7, #8]
 8000628:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800062a:	697b      	ldr	r3, [r7, #20]
 800062c:	fa93 f3a3 	rbit	r3, r3
 8000630:	613b      	str	r3, [r7, #16]
  return result;
 8000632:	693b      	ldr	r3, [r7, #16]
 8000634:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8000636:	69bb      	ldr	r3, [r7, #24]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d101      	bne.n	8000640 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 800063c:	2320      	movs	r3, #32
 800063e:	e003      	b.n	8000648 <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8000640:	69bb      	ldr	r3, [r7, #24]
 8000642:	fab3 f383 	clz	r3, r3
 8000646:	b2db      	uxtb	r3, r3
 8000648:	005b      	lsls	r3, r3, #1
 800064a:	2103      	movs	r1, #3
 800064c:	fa01 f303 	lsl.w	r3, r1, r3
 8000650:	43db      	mvns	r3, r3
 8000652:	401a      	ands	r2, r3
 8000654:	68bb      	ldr	r3, [r7, #8]
 8000656:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000658:	6a3b      	ldr	r3, [r7, #32]
 800065a:	fa93 f3a3 	rbit	r3, r3
 800065e:	61fb      	str	r3, [r7, #28]
  return result;
 8000660:	69fb      	ldr	r3, [r7, #28]
 8000662:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8000664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000666:	2b00      	cmp	r3, #0
 8000668:	d101      	bne.n	800066e <LL_GPIO_SetPinPull+0x58>
    return 32U;
 800066a:	2320      	movs	r3, #32
 800066c:	e003      	b.n	8000676 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 800066e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000670:	fab3 f383 	clz	r3, r3
 8000674:	b2db      	uxtb	r3, r3
 8000676:	005b      	lsls	r3, r3, #1
 8000678:	6879      	ldr	r1, [r7, #4]
 800067a:	fa01 f303 	lsl.w	r3, r1, r3
 800067e:	431a      	orrs	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	60da      	str	r2, [r3, #12]
}
 8000684:	bf00      	nop
 8000686:	372c      	adds	r7, #44	; 0x2c
 8000688:	46bd      	mov	sp, r7
 800068a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068e:	4770      	bx	lr

08000690 <LL_GPIO_ResetOutputPin>:
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
 8000698:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BRR, PinMask);
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	683a      	ldr	r2, [r7, #0]
 800069e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80006a0:	bf00      	nop
 80006a2:	370c      	adds	r7, #12
 80006a4:	46bd      	mov	sp, r7
 80006a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006aa:	4770      	bx	lr

080006ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b08a      	sub	sp, #40	; 0x28
 80006b0:	af00      	add	r7, sp, #0

  LL_EXTI_InitTypeDef EXTI_InitStruct = {0};
 80006b2:	f107 031c 	add.w	r3, r7, #28
 80006b6:	2200      	movs	r2, #0
 80006b8:	601a      	str	r2, [r3, #0]
 80006ba:	605a      	str	r2, [r3, #4]
 80006bc:	609a      	str	r2, [r3, #8]
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006be:	1d3b      	adds	r3, r7, #4
 80006c0:	2200      	movs	r2, #0
 80006c2:	601a      	str	r2, [r3, #0]
 80006c4:	605a      	str	r2, [r3, #4]
 80006c6:	609a      	str	r2, [r3, #8]
 80006c8:	60da      	str	r2, [r3, #12]
 80006ca:	611a      	str	r2, [r3, #16]
 80006cc:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 80006ce:	2004      	movs	r0, #4
 80006d0:	f7ff ff16 	bl	8000500 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 80006d4:	2001      	movs	r0, #1
 80006d6:	f7ff ff13 	bl	8000500 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 80006da:	2002      	movs	r0, #2
 80006dc:	f7ff ff10 	bl	8000500 <LL_AHB2_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(LD2_GPIO_Port, LD2_Pin);
 80006e0:	2120      	movs	r1, #32
 80006e2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80006e6:	f7ff ffd3 	bl	8000690 <LL_GPIO_ResetOutputPin>

  /**/
  LL_GPIO_ResetOutputPin(CS1_GPIO_Port, CS1_Pin);
 80006ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80006ee:	4825      	ldr	r0, [pc, #148]	; (8000784 <MX_GPIO_Init+0xd8>)
 80006f0:	f7ff ffce 	bl	8000690 <LL_GPIO_ResetOutputPin>

  /**/
  LL_SYSCFG_SetEXTISource(LL_SYSCFG_EXTI_PORTC, LL_SYSCFG_EXTI_LINE13);
 80006f4:	4924      	ldr	r1, [pc, #144]	; (8000788 <MX_GPIO_Init+0xdc>)
 80006f6:	2002      	movs	r0, #2
 80006f8:	f7ff ff1a 	bl	8000530 <LL_SYSCFG_SetEXTISource>

  /**/
  EXTI_InitStruct.Line_0_31 = LL_EXTI_LINE_13;
 80006fc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000700:	61fb      	str	r3, [r7, #28]
  EXTI_InitStruct.Line_32_63 = LL_EXTI_LINE_NONE;
 8000702:	2300      	movs	r3, #0
 8000704:	623b      	str	r3, [r7, #32]
  EXTI_InitStruct.LineCommand = ENABLE;
 8000706:	2301      	movs	r3, #1
 8000708:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  EXTI_InitStruct.Mode = LL_EXTI_MODE_IT;
 800070c:	2300      	movs	r3, #0
 800070e:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  EXTI_InitStruct.Trigger = LL_EXTI_TRIGGER_RISING;
 8000712:	2301      	movs	r3, #1
 8000714:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  LL_EXTI_Init(&EXTI_InitStruct);
 8000718:	f107 031c 	add.w	r3, r7, #28
 800071c:	4618      	mov	r0, r3
 800071e:	f001 f93d 	bl	800199c <LL_EXTI_Init>

  /**/
  LL_GPIO_SetPinPull(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_PULL_DOWN);
 8000722:	2202      	movs	r2, #2
 8000724:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000728:	4816      	ldr	r0, [pc, #88]	; (8000784 <MX_GPIO_Init+0xd8>)
 800072a:	f7ff ff74 	bl	8000616 <LL_GPIO_SetPinPull>

  /**/
  LL_GPIO_SetPinMode(USER_BUTTON_GPIO_Port, USER_BUTTON_Pin, LL_GPIO_MODE_INPUT);
 800072e:	2200      	movs	r2, #0
 8000730:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000734:	4813      	ldr	r0, [pc, #76]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000736:	f7ff ff31 	bl	800059c <LL_GPIO_SetPinMode>

  /**/
  GPIO_InitStruct.Pin = LD2_Pin;
 800073a:	2320      	movs	r3, #32
 800073c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 800073e:	2301      	movs	r3, #1
 8000740:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000742:	2300      	movs	r3, #0
 8000744:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000746:	2300      	movs	r3, #0
 8000748:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800074a:	2300      	movs	r3, #0
 800074c:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4619      	mov	r1, r3
 8000752:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000756:	f001 fb60 	bl	8001e1a <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = CS1_Pin;
 800075a:	f44f 7300 	mov.w	r3, #512	; 0x200
 800075e:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000760:	2301      	movs	r3, #1
 8000762:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000768:	2300      	movs	r3, #0
 800076a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(CS1_GPIO_Port, &GPIO_InitStruct);
 8000770:	1d3b      	adds	r3, r7, #4
 8000772:	4619      	mov	r1, r3
 8000774:	4803      	ldr	r0, [pc, #12]	; (8000784 <MX_GPIO_Init+0xd8>)
 8000776:	f001 fb50 	bl	8001e1a <LL_GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3728      	adds	r7, #40	; 0x28
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	48000800 	.word	0x48000800
 8000788:	00f00003 	.word	0x00f00003

0800078c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800078c:	b480      	push	{r7}
 800078e:	b085      	sub	sp, #20
 8000790:	af00      	add	r7, sp, #0
 8000792:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000794:	687b      	ldr	r3, [r7, #4]
 8000796:	f003 0307 	and.w	r3, r3, #7
 800079a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800079c:	4b0c      	ldr	r3, [pc, #48]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 800079e:	68db      	ldr	r3, [r3, #12]
 80007a0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80007a2:	68ba      	ldr	r2, [r7, #8]
 80007a4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80007a8:	4013      	ands	r3, r2
 80007aa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80007ac:	68fb      	ldr	r3, [r7, #12]
 80007ae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80007b0:	68bb      	ldr	r3, [r7, #8]
 80007b2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80007b4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80007b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007bc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80007be:	4a04      	ldr	r2, [pc, #16]	; (80007d0 <__NVIC_SetPriorityGrouping+0x44>)
 80007c0:	68bb      	ldr	r3, [r7, #8]
 80007c2:	60d3      	str	r3, [r2, #12]
}
 80007c4:	bf00      	nop
 80007c6:	3714      	adds	r7, #20
 80007c8:	46bd      	mov	sp, r7
 80007ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ce:	4770      	bx	lr
 80007d0:	e000ed00 	.word	0xe000ed00

080007d4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80007d4:	b480      	push	{r7}
 80007d6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80007d8:	4b04      	ldr	r3, [pc, #16]	; (80007ec <__NVIC_GetPriorityGrouping+0x18>)
 80007da:	68db      	ldr	r3, [r3, #12]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	f003 0307 	and.w	r3, r3, #7
}
 80007e2:	4618      	mov	r0, r3
 80007e4:	46bd      	mov	sp, r7
 80007e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ea:	4770      	bx	lr
 80007ec:	e000ed00 	.word	0xe000ed00

080007f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007f0:	b480      	push	{r7}
 80007f2:	b083      	sub	sp, #12
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	4603      	mov	r3, r0
 80007f8:	6039      	str	r1, [r7, #0]
 80007fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000800:	2b00      	cmp	r3, #0
 8000802:	db0a      	blt.n	800081a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000804:	683b      	ldr	r3, [r7, #0]
 8000806:	b2da      	uxtb	r2, r3
 8000808:	490c      	ldr	r1, [pc, #48]	; (800083c <__NVIC_SetPriority+0x4c>)
 800080a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800080e:	0112      	lsls	r2, r2, #4
 8000810:	b2d2      	uxtb	r2, r2
 8000812:	440b      	add	r3, r1
 8000814:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000818:	e00a      	b.n	8000830 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800081a:	683b      	ldr	r3, [r7, #0]
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4908      	ldr	r1, [pc, #32]	; (8000840 <__NVIC_SetPriority+0x50>)
 8000820:	79fb      	ldrb	r3, [r7, #7]
 8000822:	f003 030f 	and.w	r3, r3, #15
 8000826:	3b04      	subs	r3, #4
 8000828:	0112      	lsls	r2, r2, #4
 800082a:	b2d2      	uxtb	r2, r2
 800082c:	440b      	add	r3, r1
 800082e:	761a      	strb	r2, [r3, #24]
}
 8000830:	bf00      	nop
 8000832:	370c      	adds	r7, #12
 8000834:	46bd      	mov	sp, r7
 8000836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083a:	4770      	bx	lr
 800083c:	e000e100 	.word	0xe000e100
 8000840:	e000ed00 	.word	0xe000ed00

08000844 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000844:	b480      	push	{r7}
 8000846:	b089      	sub	sp, #36	; 0x24
 8000848:	af00      	add	r7, sp, #0
 800084a:	60f8      	str	r0, [r7, #12]
 800084c:	60b9      	str	r1, [r7, #8]
 800084e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000850:	68fb      	ldr	r3, [r7, #12]
 8000852:	f003 0307 	and.w	r3, r3, #7
 8000856:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000858:	69fb      	ldr	r3, [r7, #28]
 800085a:	f1c3 0307 	rsb	r3, r3, #7
 800085e:	2b04      	cmp	r3, #4
 8000860:	bf28      	it	cs
 8000862:	2304      	movcs	r3, #4
 8000864:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000866:	69fb      	ldr	r3, [r7, #28]
 8000868:	3304      	adds	r3, #4
 800086a:	2b06      	cmp	r3, #6
 800086c:	d902      	bls.n	8000874 <NVIC_EncodePriority+0x30>
 800086e:	69fb      	ldr	r3, [r7, #28]
 8000870:	3b03      	subs	r3, #3
 8000872:	e000      	b.n	8000876 <NVIC_EncodePriority+0x32>
 8000874:	2300      	movs	r3, #0
 8000876:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000878:	f04f 32ff 	mov.w	r2, #4294967295
 800087c:	69bb      	ldr	r3, [r7, #24]
 800087e:	fa02 f303 	lsl.w	r3, r2, r3
 8000882:	43da      	mvns	r2, r3
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	401a      	ands	r2, r3
 8000888:	697b      	ldr	r3, [r7, #20]
 800088a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800088c:	f04f 31ff 	mov.w	r1, #4294967295
 8000890:	697b      	ldr	r3, [r7, #20]
 8000892:	fa01 f303 	lsl.w	r3, r1, r3
 8000896:	43d9      	mvns	r1, r3
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800089c:	4313      	orrs	r3, r2
         );
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3724      	adds	r7, #36	; 0x24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a8:	4770      	bx	lr
	...

080008ac <LL_RCC_MSI_Enable>:
  * @brief  Enable MSI oscillator
  * @rmtoll CR           MSION         LL_RCC_MSI_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_Enable(void)
{
 80008ac:	b480      	push	{r7}
 80008ae:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSION);
 80008b0:	4b05      	ldr	r3, [pc, #20]	; (80008c8 <LL_RCC_MSI_Enable+0x1c>)
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a04      	ldr	r2, [pc, #16]	; (80008c8 <LL_RCC_MSI_Enable+0x1c>)
 80008b6:	f043 0301 	orr.w	r3, r3, #1
 80008ba:	6013      	str	r3, [r2, #0]
}
 80008bc:	bf00      	nop
 80008be:	46bd      	mov	sp, r7
 80008c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c4:	4770      	bx	lr
 80008c6:	bf00      	nop
 80008c8:	40021000 	.word	0x40021000

080008cc <LL_RCC_MSI_IsReady>:
  * @brief  Check if MSI oscillator Ready
  * @rmtoll CR           MSIRDY        LL_RCC_MSI_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_MSI_IsReady(void)
{
 80008cc:	b480      	push	{r7}
 80008ce:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RCC_CR_MSIRDY) ? 1UL : 0UL);
 80008d0:	4b06      	ldr	r3, [pc, #24]	; (80008ec <LL_RCC_MSI_IsReady+0x20>)
 80008d2:	681b      	ldr	r3, [r3, #0]
 80008d4:	f003 0302 	and.w	r3, r3, #2
 80008d8:	2b02      	cmp	r3, #2
 80008da:	d101      	bne.n	80008e0 <LL_RCC_MSI_IsReady+0x14>
 80008dc:	2301      	movs	r3, #1
 80008de:	e000      	b.n	80008e2 <LL_RCC_MSI_IsReady+0x16>
 80008e0:	2300      	movs	r3, #0
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	46bd      	mov	sp, r7
 80008e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ea:	4770      	bx	lr
 80008ec:	40021000 	.word	0x40021000

080008f0 <LL_RCC_MSI_EnableRangeSelection>:
  *       MSISRANGE
  * @rmtoll CR           MSIRGSEL      LL_RCC_MSI_EnableRangeSelection
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_EnableRangeSelection(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIRGSEL);
 80008f4:	4b05      	ldr	r3, [pc, #20]	; (800090c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a04      	ldr	r2, [pc, #16]	; (800090c <LL_RCC_MSI_EnableRangeSelection+0x1c>)
 80008fa:	f043 0308 	orr.w	r3, r3, #8
 80008fe:	6013      	str	r3, [r2, #0]
}
 8000900:	bf00      	nop
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000

08000910 <LL_RCC_MSI_SetRange>:
  *         @arg @ref LL_RCC_MSIRANGE_10
  *         @arg @ref LL_RCC_MSIRANGE_11
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetRange(uint32_t Range)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CR, RCC_CR_MSIRANGE, Range);
 8000918:	4b06      	ldr	r3, [pc, #24]	; (8000934 <LL_RCC_MSI_SetRange+0x24>)
 800091a:	681b      	ldr	r3, [r3, #0]
 800091c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000920:	4904      	ldr	r1, [pc, #16]	; (8000934 <LL_RCC_MSI_SetRange+0x24>)
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	4313      	orrs	r3, r2
 8000926:	600b      	str	r3, [r1, #0]
}
 8000928:	bf00      	nop
 800092a:	370c      	adds	r7, #12
 800092c:	46bd      	mov	sp, r7
 800092e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000932:	4770      	bx	lr
 8000934:	40021000 	.word	0x40021000

08000938 <LL_RCC_MSI_SetCalibTrimming>:
  * @rmtoll ICSCR        MSITRIM       LL_RCC_MSI_SetCalibTrimming
  * @param  Value Between Min_Data = 0 and Max_Data = 255
  * @retval None
  */
__STATIC_INLINE void LL_RCC_MSI_SetCalibTrimming(uint32_t Value)
{
 8000938:	b480      	push	{r7}
 800093a:	b083      	sub	sp, #12
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->ICSCR, RCC_ICSCR_MSITRIM, Value << RCC_ICSCR_MSITRIM_Pos);
 8000940:	4b07      	ldr	r3, [pc, #28]	; (8000960 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 8000942:	685b      	ldr	r3, [r3, #4]
 8000944:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000948:	687b      	ldr	r3, [r7, #4]
 800094a:	021b      	lsls	r3, r3, #8
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <LL_RCC_MSI_SetCalibTrimming+0x28>)
 800094e:	4313      	orrs	r3, r2
 8000950:	604b      	str	r3, [r1, #4]
}
 8000952:	bf00      	nop
 8000954:	370c      	adds	r7, #12
 8000956:	46bd      	mov	sp, r7
 8000958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095c:	4770      	bx	lr
 800095e:	bf00      	nop
 8000960:	40021000 	.word	0x40021000

08000964 <LL_RCC_SetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_PLL
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 8000964:	b480      	push	{r7}
 8000966:	b083      	sub	sp, #12
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <LL_RCC_SetSysClkSource+0x24>)
 800096e:	689b      	ldr	r3, [r3, #8]
 8000970:	f023 0203 	bic.w	r2, r3, #3
 8000974:	4904      	ldr	r1, [pc, #16]	; (8000988 <LL_RCC_SetSysClkSource+0x24>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	4313      	orrs	r3, r2
 800097a:	608b      	str	r3, [r1, #8]
}
 800097c:	bf00      	nop
 800097e:	370c      	adds	r7, #12
 8000980:	46bd      	mov	sp, r7
 8000982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000986:	4770      	bx	lr
 8000988:	40021000 	.word	0x40021000

0800098c <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSI
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_HSE
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLL
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000990:	4b04      	ldr	r3, [pc, #16]	; (80009a4 <LL_RCC_GetSysClkSource+0x18>)
 8000992:	689b      	ldr	r3, [r3, #8]
 8000994:	f003 030c 	and.w	r3, r3, #12
}
 8000998:	4618      	mov	r0, r3
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 80009a8:	b480      	push	{r7}
 80009aa:	b083      	sub	sp, #12
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 80009b0:	4b06      	ldr	r3, [pc, #24]	; (80009cc <LL_RCC_SetAHBPrescaler+0x24>)
 80009b2:	689b      	ldr	r3, [r3, #8]
 80009b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80009b8:	4904      	ldr	r1, [pc, #16]	; (80009cc <LL_RCC_SetAHBPrescaler+0x24>)
 80009ba:	687b      	ldr	r3, [r7, #4]
 80009bc:	4313      	orrs	r3, r2
 80009be:	608b      	str	r3, [r1, #8]
}
 80009c0:	bf00      	nop
 80009c2:	370c      	adds	r7, #12
 80009c4:	46bd      	mov	sp, r7
 80009c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ca:	4770      	bx	lr
 80009cc:	40021000 	.word	0x40021000

080009d0 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009da:	689b      	ldr	r3, [r3, #8]
 80009dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80009e0:	4904      	ldr	r1, [pc, #16]	; (80009f4 <LL_RCC_SetAPB1Prescaler+0x24>)
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	4313      	orrs	r3, r2
 80009e6:	608b      	str	r3, [r1, #8]
}
 80009e8:	bf00      	nop
 80009ea:	370c      	adds	r7, #12
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	40021000 	.word	0x40021000

080009f8 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000a00:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a02:	689b      	ldr	r3, [r3, #8]
 8000a04:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8000a08:	4904      	ldr	r1, [pc, #16]	; (8000a1c <LL_RCC_SetAPB2Prescaler+0x24>)
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	4313      	orrs	r3, r2
 8000a0e:	608b      	str	r3, [r1, #8]
}
 8000a10:	bf00      	nop
 8000a12:	370c      	adds	r7, #12
 8000a14:	46bd      	mov	sp, r7
 8000a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1a:	4770      	bx	lr
 8000a1c:	40021000 	.word	0x40021000

08000a20 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000a24:	4b05      	ldr	r3, [pc, #20]	; (8000a3c <LL_RCC_PLL_Enable+0x1c>)
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a04      	ldr	r2, [pc, #16]	; (8000a3c <LL_RCC_PLL_Enable+0x1c>)
 8000a2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000a2e:	6013      	str	r3, [r2, #0]
}
 8000a30:	bf00      	nop
 8000a32:	46bd      	mov	sp, r7
 8000a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a38:	4770      	bx	lr
 8000a3a:	bf00      	nop
 8000a3c:	40021000 	.word	0x40021000

08000a40 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RCC_CR_PLLRDY) ? 1UL : 0UL);
 8000a44:	4b07      	ldr	r3, [pc, #28]	; (8000a64 <LL_RCC_PLL_IsReady+0x24>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000a4c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000a50:	d101      	bne.n	8000a56 <LL_RCC_PLL_IsReady+0x16>
 8000a52:	2301      	movs	r3, #1
 8000a54:	e000      	b.n	8000a58 <LL_RCC_PLL_IsReady+0x18>
 8000a56:	2300      	movs	r3, #0
}
 8000a58:	4618      	mov	r0, r3
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr
 8000a62:	bf00      	nop
 8000a64:	40021000 	.word	0x40021000

08000a68 <LL_RCC_PLL_ConfigDomain_SYS>:
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_8
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLR)
{
 8000a68:	b480      	push	{r7}
 8000a6a:	b085      	sub	sp, #20
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	60f8      	str	r0, [r7, #12]
 8000a70:	60b9      	str	r1, [r7, #8]
 8000a72:	607a      	str	r2, [r7, #4]
 8000a74:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN | RCC_PLLCFGR_PLLR,
 8000a76:	4b0a      	ldr	r3, [pc, #40]	; (8000aa0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a78:	68da      	ldr	r2, [r3, #12]
 8000a7a:	4b0a      	ldr	r3, [pc, #40]	; (8000aa4 <LL_RCC_PLL_ConfigDomain_SYS+0x3c>)
 8000a7c:	4013      	ands	r3, r2
 8000a7e:	68f9      	ldr	r1, [r7, #12]
 8000a80:	68ba      	ldr	r2, [r7, #8]
 8000a82:	4311      	orrs	r1, r2
 8000a84:	687a      	ldr	r2, [r7, #4]
 8000a86:	0212      	lsls	r2, r2, #8
 8000a88:	4311      	orrs	r1, r2
 8000a8a:	683a      	ldr	r2, [r7, #0]
 8000a8c:	430a      	orrs	r2, r1
 8000a8e:	4904      	ldr	r1, [pc, #16]	; (8000aa0 <LL_RCC_PLL_ConfigDomain_SYS+0x38>)
 8000a90:	4313      	orrs	r3, r2
 8000a92:	60cb      	str	r3, [r1, #12]
             Source | PLLM | (PLLN << RCC_PLLCFGR_PLLN_Pos) | PLLR);
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	40021000 	.word	0x40021000
 8000aa4:	f9ff808c 	.word	0xf9ff808c

08000aa8 <LL_RCC_PLL_EnableDomain_SYS>:
  * @brief  Enable PLL output mapped on SYSCLK domain
  * @rmtoll PLLCFGR      PLLREN        LL_RCC_PLL_EnableDomain_SYS
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_EnableDomain_SYS(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLREN);
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000aae:	68db      	ldr	r3, [r3, #12]
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <LL_RCC_PLL_EnableDomain_SYS+0x1c>)
 8000ab2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8000ab6:	60d3      	str	r3, [r2, #12]
}
 8000ab8:	bf00      	nop
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	40021000 	.word	0x40021000

08000ac8 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b085      	sub	sp, #20
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ad0:	4b08      	ldr	r3, [pc, #32]	; (8000af4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ad2:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ad4:	4907      	ldr	r1, [pc, #28]	; (8000af4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	658b      	str	r3, [r1, #88]	; 0x58
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000adc:	4b05      	ldr	r3, [pc, #20]	; (8000af4 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ade:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	4013      	ands	r3, r2
 8000ae4:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ae6:	68fb      	ldr	r3, [r7, #12]
}
 8000ae8:	bf00      	nop
 8000aea:	3714      	adds	r7, #20
 8000aec:	46bd      	mov	sp, r7
 8000aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af2:	4770      	bx	lr
 8000af4:	40021000 	.word	0x40021000

08000af8 <LL_APB2_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB2_GRP1_EnableClock(uint32_t Periphs)
{
 8000af8:	b480      	push	{r7}
 8000afa:	b085      	sub	sp, #20
 8000afc:	af00      	add	r7, sp, #0
 8000afe:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB2ENR, Periphs);
 8000b00:	4b08      	ldr	r3, [pc, #32]	; (8000b24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b02:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b04:	4907      	ldr	r1, [pc, #28]	; (8000b24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	4313      	orrs	r3, r2
 8000b0a:	660b      	str	r3, [r1, #96]	; 0x60
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB2ENR, Periphs);
 8000b0c:	4b05      	ldr	r3, [pc, #20]	; (8000b24 <LL_APB2_GRP1_EnableClock+0x2c>)
 8000b0e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	4013      	ands	r3, r2
 8000b14:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	40021000 	.word	0x40021000

08000b28 <LL_FLASH_SetLatency>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 8000b30:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <LL_FLASH_SetLatency+0x24>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f023 0207 	bic.w	r2, r3, #7
 8000b38:	4904      	ldr	r1, [pc, #16]	; (8000b4c <LL_FLASH_SetLatency+0x24>)
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4313      	orrs	r3, r2
 8000b3e:	600b      	str	r3, [r1, #0]
}
 8000b40:	bf00      	nop
 8000b42:	370c      	adds	r7, #12
 8000b44:	46bd      	mov	sp, r7
 8000b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4a:	4770      	bx	lr
 8000b4c:	40022000 	.word	0x40022000

08000b50 <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_15 (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 8000b50:	b480      	push	{r7}
 8000b52:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000b54:	4b04      	ldr	r3, [pc, #16]	; (8000b68 <LL_FLASH_GetLatency+0x18>)
 8000b56:	681b      	ldr	r3, [r3, #0]
 8000b58:	f003 0307 	and.w	r3, r3, #7
}
 8000b5c:	4618      	mov	r0, r3
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	40022000 	.word	0x40022000

08000b6c <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE1
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE2
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	b083      	sub	sp, #12
 8000b70:	af00      	add	r7, sp, #0
 8000b72:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8000b74:	4b06      	ldr	r3, [pc, #24]	; (8000b90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b76:	681b      	ldr	r3, [r3, #0]
 8000b78:	f423 62c0 	bic.w	r2, r3, #1536	; 0x600
 8000b7c:	4904      	ldr	r1, [pc, #16]	; (8000b90 <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4313      	orrs	r3, r2
 8000b82:	600b      	str	r3, [r1, #0]
}
 8000b84:	bf00      	nop
 8000b86:	370c      	adds	r7, #12
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8e:	4770      	bx	lr
 8000b90:	40007000 	.word	0x40007000

08000b94 <LL_PWR_IsActiveFlag_VOS>:
  * @brief  Indicate whether the regulator is ready in the selected voltage range or if its output voltage is still changing to the required voltage level
  * @rmtoll SR2          VOSF          LL_PWR_IsActiveFlag_VOS
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_PWR_IsActiveFlag_VOS(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  return ((READ_BIT(PWR->SR2, PWR_SR2_VOSF) == (PWR_SR2_VOSF)) ? 1UL : 0UL);
 8000b98:	4b07      	ldr	r3, [pc, #28]	; (8000bb8 <LL_PWR_IsActiveFlag_VOS+0x24>)
 8000b9a:	695b      	ldr	r3, [r3, #20]
 8000b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ba0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000ba4:	d101      	bne.n	8000baa <LL_PWR_IsActiveFlag_VOS+0x16>
 8000ba6:	2301      	movs	r3, #1
 8000ba8:	e000      	b.n	8000bac <LL_PWR_IsActiveFlag_VOS+0x18>
 8000baa:	2300      	movs	r3, #0
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	40007000 	.word	0x40007000

08000bbc <LL_SPI_Disable>:
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR1, SPI_CR1_SPE);
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bcc:	687b      	ldr	r3, [r7, #4]
 8000bce:	601a      	str	r2, [r3, #0]
}
 8000bd0:	bf00      	nop
 8000bd2:	370c      	adds	r7, #12
 8000bd4:	46bd      	mov	sp, r7
 8000bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bda:	4770      	bx	lr

08000bdc <LL_SPI_DisableIT_RXNE>:
{
 8000bdc:	b480      	push	{r7}
 8000bde:	b083      	sub	sp, #12
 8000be0:	af00      	add	r7, sp, #0
 8000be2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8000be4:	687b      	ldr	r3, [r7, #4]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000bec:	687b      	ldr	r3, [r7, #4]
 8000bee:	605a      	str	r2, [r3, #4]
}
 8000bf0:	bf00      	nop
 8000bf2:	370c      	adds	r7, #12
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfa:	4770      	bx	lr

08000bfc <LL_SPI_DisableIT_TXE>:
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b083      	sub	sp, #12
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 8000c04:	687b      	ldr	r3, [r7, #4]
 8000c06:	685b      	ldr	r3, [r3, #4]
 8000c08:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	605a      	str	r2, [r3, #4]
}
 8000c10:	bf00      	nop
 8000c12:	370c      	adds	r7, #12
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <LL_USART_EnableIT_RXNE>:
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	b089      	sub	sp, #36	; 0x24
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	60fb      	str	r3, [r7, #12]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8000c28:	68fb      	ldr	r3, [r7, #12]
 8000c2a:	e853 3f00 	ldrex	r3, [r3]
 8000c2e:	60bb      	str	r3, [r7, #8]
   return(result);
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	f043 0320 	orr.w	r3, r3, #32
 8000c36:	61fb      	str	r3, [r7, #28]
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	69fa      	ldr	r2, [r7, #28]
 8000c3c:	61ba      	str	r2, [r7, #24]
 8000c3e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8000c40:	6979      	ldr	r1, [r7, #20]
 8000c42:	69ba      	ldr	r2, [r7, #24]
 8000c44:	e841 2300 	strex	r3, r2, [r1]
 8000c48:	613b      	str	r3, [r7, #16]
   return(result);
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d1e9      	bne.n	8000c24 <LL_USART_EnableIT_RXNE+0x8>
}
 8000c50:	bf00      	nop
 8000c52:	bf00      	nop
 8000c54:	3724      	adds	r7, #36	; 0x24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c5c:	4770      	bx	lr
	...

08000c60 <main>:
#include "../MyLibraries/GPIO.h"

void SystemClock_Config(void);

int main(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  LL_APB2_GRP1_EnableClock(LL_APB2_GRP1_PERIPH_SYSCFG);
 8000c64:	2001      	movs	r0, #1
 8000c66:	f7ff ff47 	bl	8000af8 <LL_APB2_GRP1_EnableClock>
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_PWR);
 8000c6a:	f04f 5080 	mov.w	r0, #268435456	; 0x10000000
 8000c6e:	f7ff ff2b 	bl	8000ac8 <LL_APB1_GRP1_EnableClock>

  /* System interrupt init*/
  NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c72:	2003      	movs	r0, #3
 8000c74:	f7ff fd8a 	bl	800078c <__NVIC_SetPriorityGrouping>

  /* SysTick_IRQn interrupt configuration */
  NVIC_SetPriority(SysTick_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),15, 0));
 8000c78:	f7ff fdac 	bl	80007d4 <__NVIC_GetPriorityGrouping>
 8000c7c:	4603      	mov	r3, r0
 8000c7e:	2200      	movs	r2, #0
 8000c80:	210f      	movs	r1, #15
 8000c82:	4618      	mov	r0, r3
 8000c84:	f7ff fdde 	bl	8000844 <NVIC_EncodePriority>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4619      	mov	r1, r3
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f7ff fdae 	bl	80007f0 <__NVIC_SetPriority>

  /* Configure the system clock */
  SystemClock_Config();
 8000c94:	f000 f820 	bl	8000cd8 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c98:	f7ff fd08 	bl	80006ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000c9c:	f000 fcc0 	bl	8001620 <MX_USART2_UART_Init>
  MX_SPI2_Init();
 8000ca0:	f000 f94a 	bl	8000f38 <MX_SPI2_Init>

  //User Init
  LL_USART_EnableIT_RXNE(USART2);
 8000ca4:	4809      	ldr	r0, [pc, #36]	; (8000ccc <main+0x6c>)
 8000ca6:	f7ff ffb9 	bl	8000c1c <LL_USART_EnableIT_RXNE>
  LL_SPI_Disable(SPI2);
 8000caa:	4809      	ldr	r0, [pc, #36]	; (8000cd0 <main+0x70>)
 8000cac:	f7ff ff86 	bl	8000bbc <LL_SPI_Disable>
  LL_SPI_DisableIT_RXNE(SPI2);
 8000cb0:	4807      	ldr	r0, [pc, #28]	; (8000cd0 <main+0x70>)
 8000cb2:	f7ff ff93 	bl	8000bdc <LL_SPI_DisableIT_RXNE>
  LL_SPI_DisableIT_TXE(SPI2);
 8000cb6:	4806      	ldr	r0, [pc, #24]	; (8000cd0 <main+0x70>)
 8000cb8:	f7ff ffa0 	bl	8000bfc <LL_SPI_DisableIT_TXE>
  GPIO_set(1, CS1_GPIO_Port, CS1_Pin);
 8000cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cc0:	4904      	ldr	r1, [pc, #16]	; (8000cd4 <main+0x74>)
 8000cc2:	2001      	movs	r0, #1
 8000cc4:	f7ff fa9c 	bl	8000200 <GPIO_set>

  while (1)
 8000cc8:	e7fe      	b.n	8000cc8 <main+0x68>
 8000cca:	bf00      	nop
 8000ccc:	40004400 	.word	0x40004400
 8000cd0:	40003800 	.word	0x40003800
 8000cd4:	48000800 	.word	0x48000800

08000cd8 <SystemClock_Config>:
  {
  }
}

void SystemClock_Config(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_0);
 8000cdc:	2000      	movs	r0, #0
 8000cde:	f7ff ff23 	bl	8000b28 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_0)
 8000ce2:	bf00      	nop
 8000ce4:	f7ff ff34 	bl	8000b50 <LL_FLASH_GetLatency>
 8000ce8:	4603      	mov	r3, r0
 8000cea:	2b00      	cmp	r3, #0
 8000cec:	d1fa      	bne.n	8000ce4 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000cee:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000cf2:	f7ff ff3b 	bl	8000b6c <LL_PWR_SetRegulVoltageScaling>
  while (LL_PWR_IsActiveFlag_VOS() != 0)
 8000cf6:	bf00      	nop
 8000cf8:	f7ff ff4c 	bl	8000b94 <LL_PWR_IsActiveFlag_VOS>
 8000cfc:	4603      	mov	r3, r0
 8000cfe:	2b00      	cmp	r3, #0
 8000d00:	d1fa      	bne.n	8000cf8 <SystemClock_Config+0x20>
  {
  }
  LL_RCC_MSI_Enable();
 8000d02:	f7ff fdd3 	bl	80008ac <LL_RCC_MSI_Enable>

   /* Wait till MSI is ready */
  while(LL_RCC_MSI_IsReady() != 1)
 8000d06:	bf00      	nop
 8000d08:	f7ff fde0 	bl	80008cc <LL_RCC_MSI_IsReady>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b01      	cmp	r3, #1
 8000d10:	d1fa      	bne.n	8000d08 <SystemClock_Config+0x30>
  {

  }
  LL_RCC_MSI_EnableRangeSelection();
 8000d12:	f7ff fded 	bl	80008f0 <LL_RCC_MSI_EnableRangeSelection>
  LL_RCC_MSI_SetRange(LL_RCC_MSIRANGE_6);
 8000d16:	2060      	movs	r0, #96	; 0x60
 8000d18:	f7ff fdfa 	bl	8000910 <LL_RCC_MSI_SetRange>
  LL_RCC_MSI_SetCalibTrimming(0);
 8000d1c:	2000      	movs	r0, #0
 8000d1e:	f7ff fe0b 	bl	8000938 <LL_RCC_MSI_SetCalibTrimming>
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_MSI, LL_RCC_PLLM_DIV_1, 16, LL_RCC_PLLR_DIV_4);
 8000d22:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000d26:	2210      	movs	r2, #16
 8000d28:	2100      	movs	r1, #0
 8000d2a:	2001      	movs	r0, #1
 8000d2c:	f7ff fe9c 	bl	8000a68 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_EnableDomain_SYS();
 8000d30:	f7ff feba 	bl	8000aa8 <LL_RCC_PLL_EnableDomain_SYS>
  LL_RCC_PLL_Enable();
 8000d34:	f7ff fe74 	bl	8000a20 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000d38:	bf00      	nop
 8000d3a:	f7ff fe81 	bl	8000a40 <LL_RCC_PLL_IsReady>
 8000d3e:	4603      	mov	r3, r0
 8000d40:	2b01      	cmp	r3, #1
 8000d42:	d1fa      	bne.n	8000d3a <SystemClock_Config+0x62>
  {

  }
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000d44:	2003      	movs	r0, #3
 8000d46:	f7ff fe0d 	bl	8000964 <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff fe1e 	bl	800098c <LL_RCC_GetSysClkSource>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b0c      	cmp	r3, #12
 8000d54:	d1fa      	bne.n	8000d4c <SystemClock_Config+0x74>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000d56:	2000      	movs	r0, #0
 8000d58:	f7ff fe26 	bl	80009a8 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_1);
 8000d5c:	2000      	movs	r0, #0
 8000d5e:	f7ff fe37 	bl	80009d0 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_1);
 8000d62:	2000      	movs	r0, #0
 8000d64:	f7ff fe48 	bl	80009f8 <LL_RCC_SetAPB2Prescaler>

  LL_Init1msTick(16000000);
 8000d68:	4803      	ldr	r0, [pc, #12]	; (8000d78 <SystemClock_Config+0xa0>)
 8000d6a:	f001 fe17 	bl	800299c <LL_Init1msTick>

  LL_SetSystemCoreClock(16000000);
 8000d6e:	4802      	ldr	r0, [pc, #8]	; (8000d78 <SystemClock_Config+0xa0>)
 8000d70:	f001 fe22 	bl	80029b8 <LL_SetSystemCoreClock>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	00f42400 	.word	0x00f42400

08000d7c <__NVIC_GetPriorityGrouping>:
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <__NVIC_GetPriorityGrouping+0x18>)
 8000d82:	68db      	ldr	r3, [r3, #12]
 8000d84:	0a1b      	lsrs	r3, r3, #8
 8000d86:	f003 0307 	and.w	r3, r3, #7
}
 8000d8a:	4618      	mov	r0, r3
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d92:	4770      	bx	lr
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <__NVIC_EnableIRQ>:
{
 8000d98:	b480      	push	{r7}
 8000d9a:	b083      	sub	sp, #12
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	4603      	mov	r3, r0
 8000da0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000da2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	db0b      	blt.n	8000dc2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000daa:	79fb      	ldrb	r3, [r7, #7]
 8000dac:	f003 021f 	and.w	r2, r3, #31
 8000db0:	4907      	ldr	r1, [pc, #28]	; (8000dd0 <__NVIC_EnableIRQ+0x38>)
 8000db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000db6:	095b      	lsrs	r3, r3, #5
 8000db8:	2001      	movs	r0, #1
 8000dba:	fa00 f202 	lsl.w	r2, r0, r2
 8000dbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000dc2:	bf00      	nop
 8000dc4:	370c      	adds	r7, #12
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr
 8000dce:	bf00      	nop
 8000dd0:	e000e100 	.word	0xe000e100

08000dd4 <__NVIC_SetPriority>:
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	b083      	sub	sp, #12
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	4603      	mov	r3, r0
 8000ddc:	6039      	str	r1, [r7, #0]
 8000dde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000de0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	db0a      	blt.n	8000dfe <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	b2da      	uxtb	r2, r3
 8000dec:	490c      	ldr	r1, [pc, #48]	; (8000e20 <__NVIC_SetPriority+0x4c>)
 8000dee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000df2:	0112      	lsls	r2, r2, #4
 8000df4:	b2d2      	uxtb	r2, r2
 8000df6:	440b      	add	r3, r1
 8000df8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000dfc:	e00a      	b.n	8000e14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4908      	ldr	r1, [pc, #32]	; (8000e24 <__NVIC_SetPriority+0x50>)
 8000e04:	79fb      	ldrb	r3, [r7, #7]
 8000e06:	f003 030f 	and.w	r3, r3, #15
 8000e0a:	3b04      	subs	r3, #4
 8000e0c:	0112      	lsls	r2, r2, #4
 8000e0e:	b2d2      	uxtb	r2, r2
 8000e10:	440b      	add	r3, r1
 8000e12:	761a      	strb	r2, [r3, #24]
}
 8000e14:	bf00      	nop
 8000e16:	370c      	adds	r7, #12
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr
 8000e20:	e000e100 	.word	0xe000e100
 8000e24:	e000ed00 	.word	0xe000ed00

08000e28 <NVIC_EncodePriority>:
{
 8000e28:	b480      	push	{r7}
 8000e2a:	b089      	sub	sp, #36	; 0x24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	60f8      	str	r0, [r7, #12]
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e34:	68fb      	ldr	r3, [r7, #12]
 8000e36:	f003 0307 	and.w	r3, r3, #7
 8000e3a:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e3c:	69fb      	ldr	r3, [r7, #28]
 8000e3e:	f1c3 0307 	rsb	r3, r3, #7
 8000e42:	2b04      	cmp	r3, #4
 8000e44:	bf28      	it	cs
 8000e46:	2304      	movcs	r3, #4
 8000e48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e4a:	69fb      	ldr	r3, [r7, #28]
 8000e4c:	3304      	adds	r3, #4
 8000e4e:	2b06      	cmp	r3, #6
 8000e50:	d902      	bls.n	8000e58 <NVIC_EncodePriority+0x30>
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	3b03      	subs	r3, #3
 8000e56:	e000      	b.n	8000e5a <NVIC_EncodePriority+0x32>
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e60:	69bb      	ldr	r3, [r7, #24]
 8000e62:	fa02 f303 	lsl.w	r3, r2, r3
 8000e66:	43da      	mvns	r2, r3
 8000e68:	68bb      	ldr	r3, [r7, #8]
 8000e6a:	401a      	ands	r2, r3
 8000e6c:	697b      	ldr	r3, [r7, #20]
 8000e6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e70:	f04f 31ff 	mov.w	r1, #4294967295
 8000e74:	697b      	ldr	r3, [r7, #20]
 8000e76:	fa01 f303 	lsl.w	r3, r1, r3
 8000e7a:	43d9      	mvns	r1, r3
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e80:	4313      	orrs	r3, r2
}
 8000e82:	4618      	mov	r0, r3
 8000e84:	3724      	adds	r7, #36	; 0x24
 8000e86:	46bd      	mov	sp, r7
 8000e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e8c:	4770      	bx	lr
	...

08000e90 <LL_AHB2_GRP1_EnableClock>:
{
 8000e90:	b480      	push	{r7}
 8000e92:	b085      	sub	sp, #20
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 8000e98:	4b08      	ldr	r3, [pc, #32]	; (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000e9c:	4907      	ldr	r1, [pc, #28]	; (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4313      	orrs	r3, r2
 8000ea2:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8000ea4:	4b05      	ldr	r3, [pc, #20]	; (8000ebc <LL_AHB2_GRP1_EnableClock+0x2c>)
 8000ea6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	4013      	ands	r3, r2
 8000eac:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000eae:	68fb      	ldr	r3, [r7, #12]
}
 8000eb0:	bf00      	nop
 8000eb2:	3714      	adds	r7, #20
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <LL_APB1_GRP1_EnableClock>:
{
 8000ec0:	b480      	push	{r7}
 8000ec2:	b085      	sub	sp, #20
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 8000ec8:	4b08      	ldr	r3, [pc, #32]	; (8000eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8000eca:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ecc:	4907      	ldr	r1, [pc, #28]	; (8000eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 8000ed4:	4b05      	ldr	r3, [pc, #20]	; (8000eec <LL_APB1_GRP1_EnableClock+0x2c>)
 8000ed6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	4013      	ands	r3, r2
 8000edc:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000ede:	68fb      	ldr	r3, [r7, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eea:	4770      	bx	lr
 8000eec:	40021000 	.word	0x40021000

08000ef0 <LL_SPI_SetStandard>:
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRF, Standard);
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	685b      	ldr	r3, [r3, #4]
 8000efe:	f023 0210 	bic.w	r2, r3, #16
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	431a      	orrs	r2, r3
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	605a      	str	r2, [r3, #4]
}
 8000f0a:	bf00      	nop
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <LL_SPI_DisableNSSPulseMgt>:
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_NSSP);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f023 0208 	bic.w	r2, r3, #8
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	605a      	str	r2, [r3, #4]
}
 8000f2a:	bf00      	nop
 8000f2c:	370c      	adds	r7, #12
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <MX_SPI2_Init>:

/* USER CODE END 0 */

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b090      	sub	sp, #64	; 0x40
 8000f3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 0 */

  /* USER CODE END SPI2_Init 0 */

  LL_SPI_InitTypeDef SPI_InitStruct = {0};
 8000f3e:	f107 0318 	add.w	r3, r7, #24
 8000f42:	2228      	movs	r2, #40	; 0x28
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f001 fd46 	bl	80029d8 <memset>

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f4c:	463b      	mov	r3, r7
 8000f4e:	2200      	movs	r2, #0
 8000f50:	601a      	str	r2, [r3, #0]
 8000f52:	605a      	str	r2, [r3, #4]
 8000f54:	609a      	str	r2, [r3, #8]
 8000f56:	60da      	str	r2, [r3, #12]
 8000f58:	611a      	str	r2, [r3, #16]
 8000f5a:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_SPI2);
 8000f5c:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8000f60:	f7ff ffae 	bl	8000ec0 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOC);
 8000f64:	2004      	movs	r0, #4
 8000f66:	f7ff ff93 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOB);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f7ff ff90 	bl	8000e90 <LL_AHB2_GRP1_EnableClock>
  /**SPI2 GPIO Configuration
  PC2   ------> SPI2_MISO
  PC3   ------> SPI2_MOSI
  PB10   ------> SPI2_SCK
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8000f70:	230c      	movs	r3, #12
 8000f72:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f74:	2302      	movs	r3, #2
 8000f76:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f78:	2303      	movs	r3, #3
 8000f7a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000f80:	2300      	movs	r3, #0
 8000f82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000f84:	2305      	movs	r3, #5
 8000f86:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f88:	463b      	mov	r3, r7
 8000f8a:	4619      	mov	r1, r3
 8000f8c:	4826      	ldr	r0, [pc, #152]	; (8001028 <MX_SPI2_Init+0xf0>)
 8000f8e:	f000 ff44 	bl	8001e1a <LL_GPIO_Init>

  GPIO_InitStruct.Pin = LL_GPIO_PIN_10;
 8000f92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000f96:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000f9c:	2303      	movs	r3, #3
 8000f9e:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000fa0:	2300      	movs	r3, #0
 8000fa2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_5;
 8000fa8:	2305      	movs	r3, #5
 8000faa:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	481e      	ldr	r0, [pc, #120]	; (800102c <MX_SPI2_Init+0xf4>)
 8000fb2:	f000 ff32 	bl	8001e1a <LL_GPIO_Init>

  /* SPI2 interrupt Init */
  NVIC_SetPriority(SPI2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8000fb6:	f7ff fee1 	bl	8000d7c <__NVIC_GetPriorityGrouping>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2100      	movs	r1, #0
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ff31 	bl	8000e28 <NVIC_EncodePriority>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	4619      	mov	r1, r3
 8000fca:	2024      	movs	r0, #36	; 0x24
 8000fcc:	f7ff ff02 	bl	8000dd4 <__NVIC_SetPriority>
  NVIC_EnableIRQ(SPI2_IRQn);
 8000fd0:	2024      	movs	r0, #36	; 0x24
 8000fd2:	f7ff fee1 	bl	8000d98 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  SPI_InitStruct.TransferDirection = LL_SPI_FULL_DUPLEX;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	61bb      	str	r3, [r7, #24]
  SPI_InitStruct.Mode = LL_SPI_MODE_MASTER;
 8000fda:	f44f 7382 	mov.w	r3, #260	; 0x104
 8000fde:	61fb      	str	r3, [r7, #28]
  SPI_InitStruct.DataWidth = LL_SPI_DATAWIDTH_8BIT;
 8000fe0:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8000fe4:	623b      	str	r3, [r7, #32]
  SPI_InitStruct.ClockPolarity = LL_SPI_POLARITY_LOW;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	627b      	str	r3, [r7, #36]	; 0x24
  SPI_InitStruct.ClockPhase = LL_SPI_PHASE_1EDGE;
 8000fea:	2300      	movs	r3, #0
 8000fec:	62bb      	str	r3, [r7, #40]	; 0x28
  SPI_InitStruct.NSS = LL_SPI_NSS_SOFT;
 8000fee:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ff2:	62fb      	str	r3, [r7, #44]	; 0x2c
  SPI_InitStruct.BaudRate = LL_SPI_BAUDRATEPRESCALER_DIV128;
 8000ff4:	2330      	movs	r3, #48	; 0x30
 8000ff6:	633b      	str	r3, [r7, #48]	; 0x30
  SPI_InitStruct.BitOrder = LL_SPI_MSB_FIRST;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	637b      	str	r3, [r7, #52]	; 0x34
  SPI_InitStruct.CRCCalculation = LL_SPI_CRCCALCULATION_DISABLE;
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	63bb      	str	r3, [r7, #56]	; 0x38
  SPI_InitStruct.CRCPoly = 7;
 8001000:	2307      	movs	r3, #7
 8001002:	63fb      	str	r3, [r7, #60]	; 0x3c
  LL_SPI_Init(SPI2, &SPI_InitStruct);
 8001004:	f107 0318 	add.w	r3, r7, #24
 8001008:	4619      	mov	r1, r3
 800100a:	4809      	ldr	r0, [pc, #36]	; (8001030 <MX_SPI2_Init+0xf8>)
 800100c:	f001 fb68 	bl	80026e0 <LL_SPI_Init>
  LL_SPI_SetStandard(SPI2, LL_SPI_PROTOCOL_MOTOROLA);
 8001010:	2100      	movs	r1, #0
 8001012:	4807      	ldr	r0, [pc, #28]	; (8001030 <MX_SPI2_Init+0xf8>)
 8001014:	f7ff ff6c 	bl	8000ef0 <LL_SPI_SetStandard>
  LL_SPI_DisableNSSPulseMgt(SPI2);
 8001018:	4805      	ldr	r0, [pc, #20]	; (8001030 <MX_SPI2_Init+0xf8>)
 800101a:	f7ff ff7c 	bl	8000f16 <LL_SPI_DisableNSSPulseMgt>
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800101e:	bf00      	nop
 8001020:	3740      	adds	r7, #64	; 0x40
 8001022:	46bd      	mov	sp, r7
 8001024:	bd80      	pop	{r7, pc}
 8001026:	bf00      	nop
 8001028:	48000800 	.word	0x48000800
 800102c:	48000400 	.word	0x48000400
 8001030:	40003800 	.word	0x40003800

08001034 <LL_SPI_IsActiveFlag_RXNE>:
{
 8001034:	b480      	push	{r7}
 8001036:	b083      	sub	sp, #12
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_RXNE) == (SPI_SR_RXNE)) ? 1UL : 0UL);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	689b      	ldr	r3, [r3, #8]
 8001040:	f003 0301 	and.w	r3, r3, #1
 8001044:	2b01      	cmp	r3, #1
 8001046:	d101      	bne.n	800104c <LL_SPI_IsActiveFlag_RXNE+0x18>
 8001048:	2301      	movs	r3, #1
 800104a:	e000      	b.n	800104e <LL_SPI_IsActiveFlag_RXNE+0x1a>
 800104c:	2300      	movs	r3, #0
}
 800104e:	4618      	mov	r0, r3
 8001050:	370c      	adds	r7, #12
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <LL_SPI_IsActiveFlag_TXE>:
{
 800105a:	b480      	push	{r7}
 800105c:	b083      	sub	sp, #12
 800105e:	af00      	add	r7, sp, #0
 8001060:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->SR, SPI_SR_TXE) == (SPI_SR_TXE)) ? 1UL : 0UL);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	689b      	ldr	r3, [r3, #8]
 8001066:	f003 0302 	and.w	r3, r3, #2
 800106a:	2b02      	cmp	r3, #2
 800106c:	d101      	bne.n	8001072 <LL_SPI_IsActiveFlag_TXE+0x18>
 800106e:	2301      	movs	r3, #1
 8001070:	e000      	b.n	8001074 <LL_SPI_IsActiveFlag_TXE+0x1a>
 8001072:	2300      	movs	r3, #0
}
 8001074:	4618      	mov	r0, r3
 8001076:	370c      	adds	r7, #12
 8001078:	46bd      	mov	sp, r7
 800107a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107e:	4770      	bx	lr

08001080 <LL_SPI_EnableIT_RXNE>:
{
 8001080:	b480      	push	{r7}
 8001082:	b083      	sub	sp, #12
 8001084:	af00      	add	r7, sp, #0
 8001086:	6078      	str	r0, [r7, #4]
  SET_BIT(SPIx->CR2, SPI_CR2_RXNEIE);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	685b      	ldr	r3, [r3, #4]
 800108c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	605a      	str	r2, [r3, #4]
}
 8001094:	bf00      	nop
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr

080010a0 <LL_SPI_DisableIT_TXE>:
{
 80010a0:	b480      	push	{r7}
 80010a2:	b083      	sub	sp, #12
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(SPIx->CR2, SPI_CR2_TXEIE);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	685b      	ldr	r3, [r3, #4]
 80010ac:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	605a      	str	r2, [r3, #4]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr

080010c0 <LL_SPI_IsEnabledIT_RXNE>:
{
 80010c0:	b480      	push	{r7}
 80010c2:	b083      	sub	sp, #12
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_RXNEIE) == (SPI_CR2_RXNEIE)) ? 1UL : 0UL);
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	685b      	ldr	r3, [r3, #4]
 80010cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80010d0:	2b40      	cmp	r3, #64	; 0x40
 80010d2:	d101      	bne.n	80010d8 <LL_SPI_IsEnabledIT_RXNE+0x18>
 80010d4:	2301      	movs	r3, #1
 80010d6:	e000      	b.n	80010da <LL_SPI_IsEnabledIT_RXNE+0x1a>
 80010d8:	2300      	movs	r3, #0
}
 80010da:	4618      	mov	r0, r3
 80010dc:	370c      	adds	r7, #12
 80010de:	46bd      	mov	sp, r7
 80010e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e4:	4770      	bx	lr

080010e6 <LL_SPI_IsEnabledIT_TXE>:
{
 80010e6:	b480      	push	{r7}
 80010e8:	b083      	sub	sp, #12
 80010ea:	af00      	add	r7, sp, #0
 80010ec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR2, SPI_CR2_TXEIE) == (SPI_CR2_TXEIE)) ? 1UL : 0UL);
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	685b      	ldr	r3, [r3, #4]
 80010f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80010f6:	2b80      	cmp	r3, #128	; 0x80
 80010f8:	d101      	bne.n	80010fe <LL_SPI_IsEnabledIT_TXE+0x18>
 80010fa:	2301      	movs	r3, #1
 80010fc:	e000      	b.n	8001100 <LL_SPI_IsEnabledIT_TXE+0x1a>
 80010fe:	2300      	movs	r3, #0
}
 8001100:	4618      	mov	r0, r3
 8001102:	370c      	adds	r7, #12
 8001104:	46bd      	mov	sp, r7
 8001106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110a:	4770      	bx	lr

0800110c <LL_SPI_ReceiveData8>:
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
  return (*((__IO uint8_t *)&SPIx->DR));
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	330c      	adds	r3, #12
 8001118:	781b      	ldrb	r3, [r3, #0]
 800111a:	b2db      	uxtb	r3, r3
}
 800111c:	4618      	mov	r0, r3
 800111e:	370c      	adds	r7, #12
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr

08001128 <LL_USART_IsActiveFlag_RXNE>:
{
 8001128:	b480      	push	{r7}
 800112a:	b083      	sub	sp, #12
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_RXNE) == (USART_ISR_RXNE)) ? 1UL : 0UL);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	69db      	ldr	r3, [r3, #28]
 8001134:	f003 0320 	and.w	r3, r3, #32
 8001138:	2b20      	cmp	r3, #32
 800113a:	d101      	bne.n	8001140 <LL_USART_IsActiveFlag_RXNE+0x18>
 800113c:	2301      	movs	r3, #1
 800113e:	e000      	b.n	8001142 <LL_USART_IsActiveFlag_RXNE+0x1a>
 8001140:	2300      	movs	r3, #0
}
 8001142:	4618      	mov	r0, r3
 8001144:	370c      	adds	r7, #12
 8001146:	46bd      	mov	sp, r7
 8001148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114c:	4770      	bx	lr

0800114e <LL_USART_IsActiveFlag_TXE>:
{
 800114e:	b480      	push	{r7}
 8001150:	b083      	sub	sp, #12
 8001152:	af00      	add	r7, sp, #0
 8001154:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->ISR, USART_ISR_TXE) == (USART_ISR_TXE)) ? 1UL : 0UL);
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	69db      	ldr	r3, [r3, #28]
 800115a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800115e:	2b80      	cmp	r3, #128	; 0x80
 8001160:	d101      	bne.n	8001166 <LL_USART_IsActiveFlag_TXE+0x18>
 8001162:	2301      	movs	r3, #1
 8001164:	e000      	b.n	8001168 <LL_USART_IsActiveFlag_TXE+0x1a>
 8001166:	2300      	movs	r3, #0
}
 8001168:	4618      	mov	r0, r3
 800116a:	370c      	adds	r7, #12
 800116c:	46bd      	mov	sp, r7
 800116e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001172:	4770      	bx	lr

08001174 <LL_USART_EnableIT_RXNE>:
{
 8001174:	b480      	push	{r7}
 8001176:	b089      	sub	sp, #36	; 0x24
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	e853 3f00 	ldrex	r3, [r3]
 8001186:	60bb      	str	r3, [r7, #8]
   return(result);
 8001188:	68bb      	ldr	r3, [r7, #8]
 800118a:	f043 0320 	orr.w	r3, r3, #32
 800118e:	61fb      	str	r3, [r7, #28]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	69fa      	ldr	r2, [r7, #28]
 8001194:	61ba      	str	r2, [r7, #24]
 8001196:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001198:	6979      	ldr	r1, [r7, #20]
 800119a:	69ba      	ldr	r2, [r7, #24]
 800119c:	e841 2300 	strex	r3, r2, [r1]
 80011a0:	613b      	str	r3, [r7, #16]
   return(result);
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d1e9      	bne.n	800117c <LL_USART_EnableIT_RXNE+0x8>
}
 80011a8:	bf00      	nop
 80011aa:	bf00      	nop
 80011ac:	3724      	adds	r7, #36	; 0x24
 80011ae:	46bd      	mov	sp, r7
 80011b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b4:	4770      	bx	lr

080011b6 <LL_USART_EnableIT_TXE>:
{
 80011b6:	b480      	push	{r7}
 80011b8:	b089      	sub	sp, #36	; 0x24
 80011ba:	af00      	add	r7, sp, #0
 80011bc:	6078      	str	r0, [r7, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TXEIE);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80011c2:	68fb      	ldr	r3, [r7, #12]
 80011c4:	e853 3f00 	ldrex	r3, [r3]
 80011c8:	60bb      	str	r3, [r7, #8]
   return(result);
 80011ca:	68bb      	ldr	r3, [r7, #8]
 80011cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80011d0:	61fb      	str	r3, [r7, #28]
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	69fa      	ldr	r2, [r7, #28]
 80011d6:	61ba      	str	r2, [r7, #24]
 80011d8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80011da:	6979      	ldr	r1, [r7, #20]
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	e841 2300 	strex	r3, r2, [r1]
 80011e2:	613b      	str	r3, [r7, #16]
   return(result);
 80011e4:	693b      	ldr	r3, [r7, #16]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d1e9      	bne.n	80011be <LL_USART_EnableIT_TXE+0x8>
}
 80011ea:	bf00      	nop
 80011ec:	bf00      	nop
 80011ee:	3724      	adds	r7, #36	; 0x24
 80011f0:	46bd      	mov	sp, r7
 80011f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f6:	4770      	bx	lr

080011f8 <LL_USART_DisableIT_RXNE>:
{
 80011f8:	b480      	push	{r7}
 80011fa:	b089      	sub	sp, #36	; 0x24
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_RXNEIE);
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001204:	68fb      	ldr	r3, [r7, #12]
 8001206:	e853 3f00 	ldrex	r3, [r3]
 800120a:	60bb      	str	r3, [r7, #8]
   return(result);
 800120c:	68bb      	ldr	r3, [r7, #8]
 800120e:	f023 0320 	bic.w	r3, r3, #32
 8001212:	61fb      	str	r3, [r7, #28]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	69fa      	ldr	r2, [r7, #28]
 8001218:	61ba      	str	r2, [r7, #24]
 800121a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800121c:	6979      	ldr	r1, [r7, #20]
 800121e:	69ba      	ldr	r2, [r7, #24]
 8001220:	e841 2300 	strex	r3, r2, [r1]
 8001224:	613b      	str	r3, [r7, #16]
   return(result);
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	2b00      	cmp	r3, #0
 800122a:	d1e9      	bne.n	8001200 <LL_USART_DisableIT_RXNE+0x8>
}
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	3724      	adds	r7, #36	; 0x24
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <LL_USART_DisableIT_TXE>:
{
 800123a:	b480      	push	{r7}
 800123c:	b089      	sub	sp, #36	; 0x24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_TXEIE);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	e853 3f00 	ldrex	r3, [r3]
 800124c:	60bb      	str	r3, [r7, #8]
   return(result);
 800124e:	68bb      	ldr	r3, [r7, #8]
 8001250:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8001254:	61fb      	str	r3, [r7, #28]
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	69fa      	ldr	r2, [r7, #28]
 800125a:	61ba      	str	r2, [r7, #24]
 800125c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800125e:	6979      	ldr	r1, [r7, #20]
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	e841 2300 	strex	r3, r2, [r1]
 8001266:	613b      	str	r3, [r7, #16]
   return(result);
 8001268:	693b      	ldr	r3, [r7, #16]
 800126a:	2b00      	cmp	r3, #0
 800126c:	d1e9      	bne.n	8001242 <LL_USART_DisableIT_TXE+0x8>
}
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	3724      	adds	r7, #36	; 0x24
 8001274:	46bd      	mov	sp, r7
 8001276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127a:	4770      	bx	lr

0800127c <LL_USART_IsEnabledIT_RXNE>:
{
 800127c:	b480      	push	{r7}
 800127e:	b083      	sub	sp, #12
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_RXNEIE) == (USART_CR1_RXNEIE)) ? 1U : 0U);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f003 0320 	and.w	r3, r3, #32
 800128c:	2b20      	cmp	r3, #32
 800128e:	d101      	bne.n	8001294 <LL_USART_IsEnabledIT_RXNE+0x18>
 8001290:	2301      	movs	r3, #1
 8001292:	e000      	b.n	8001296 <LL_USART_IsEnabledIT_RXNE+0x1a>
 8001294:	2300      	movs	r3, #0
}
 8001296:	4618      	mov	r0, r3
 8001298:	370c      	adds	r7, #12
 800129a:	46bd      	mov	sp, r7
 800129c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a0:	4770      	bx	lr

080012a2 <LL_USART_IsEnabledIT_TXE>:
{
 80012a2:	b480      	push	{r7}
 80012a4:	b083      	sub	sp, #12
 80012a6:	af00      	add	r7, sp, #0
 80012a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_TXEIE) == (USART_CR1_TXEIE)) ? 1U : 0U);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012b2:	2b80      	cmp	r3, #128	; 0x80
 80012b4:	d101      	bne.n	80012ba <LL_USART_IsEnabledIT_TXE+0x18>
 80012b6:	2301      	movs	r3, #1
 80012b8:	e000      	b.n	80012bc <LL_USART_IsEnabledIT_TXE+0x1a>
 80012ba:	2300      	movs	r3, #0
}
 80012bc:	4618      	mov	r0, r3
 80012be:	370c      	adds	r7, #12
 80012c0:	46bd      	mov	sp, r7
 80012c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c6:	4770      	bx	lr

080012c8 <LL_USART_ReceiveData8>:
{
 80012c8:	b480      	push	{r7}
 80012ca:	b083      	sub	sp, #12
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
  return (uint8_t)(READ_BIT(USARTx->RDR, USART_RDR_RDR) & 0xFFU);
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80012d4:	b29b      	uxth	r3, r3
 80012d6:	b2db      	uxtb	r3, r3
}
 80012d8:	4618      	mov	r0, r3
 80012da:	370c      	adds	r7, #12
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <SPI2_IRQHandler>:

const uint8_t usart_string[] = "(STM32) Value received by USART: ";
const uint8_t spi_string[] = "(STM32) Value received by SPI: ";


void SPI2_IRQHandler(void){
 80012e4:	b580      	push	{r7, lr}
 80012e6:	af00      	add	r7, sp, #0
	if(LL_SPI_IsActiveFlag_TXE(SPI2) && LL_SPI_IsEnabledIT_TXE(SPI2))
 80012e8:	4821      	ldr	r0, [pc, #132]	; (8001370 <SPI2_IRQHandler+0x8c>)
 80012ea:	f7ff feb6 	bl	800105a <LL_SPI_IsActiveFlag_TXE>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d011      	beq.n	8001318 <SPI2_IRQHandler+0x34>
 80012f4:	481e      	ldr	r0, [pc, #120]	; (8001370 <SPI2_IRQHandler+0x8c>)
 80012f6:	f7ff fef6 	bl	80010e6 <LL_SPI_IsEnabledIT_TXE>
 80012fa:	4603      	mov	r3, r0
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d00b      	beq.n	8001318 <SPI2_IRQHandler+0x34>
	{
		SPIInterruptSend(SPI2, buffer);
 8001300:	4b1c      	ldr	r3, [pc, #112]	; (8001374 <SPI2_IRQHandler+0x90>)
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	4619      	mov	r1, r3
 8001306:	481a      	ldr	r0, [pc, #104]	; (8001370 <SPI2_IRQHandler+0x8c>)
 8001308:	f7ff f834 	bl	8000374 <SPIInterruptSend>
		LL_SPI_EnableIT_RXNE(SPI2);
 800130c:	4818      	ldr	r0, [pc, #96]	; (8001370 <SPI2_IRQHandler+0x8c>)
 800130e:	f7ff feb7 	bl	8001080 <LL_SPI_EnableIT_RXNE>
		LL_SPI_DisableIT_TXE(SPI2);
 8001312:	4817      	ldr	r0, [pc, #92]	; (8001370 <SPI2_IRQHandler+0x8c>)
 8001314:	f7ff fec4 	bl	80010a0 <LL_SPI_DisableIT_TXE>
	}

	if(LL_SPI_IsActiveFlag_RXNE(SPI2) && LL_SPI_IsEnabledIT_RXNE(SPI2)){
 8001318:	4815      	ldr	r0, [pc, #84]	; (8001370 <SPI2_IRQHandler+0x8c>)
 800131a:	f7ff fe8b 	bl	8001034 <LL_SPI_IsActiveFlag_RXNE>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d022      	beq.n	800136a <SPI2_IRQHandler+0x86>
 8001324:	4812      	ldr	r0, [pc, #72]	; (8001370 <SPI2_IRQHandler+0x8c>)
 8001326:	f7ff fecb 	bl	80010c0 <LL_SPI_IsEnabledIT_RXNE>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d01c      	beq.n	800136a <SPI2_IRQHandler+0x86>
		buffer = LL_SPI_ReceiveData8(SPI2);
 8001330:	480f      	ldr	r0, [pc, #60]	; (8001370 <SPI2_IRQHandler+0x8c>)
 8001332:	f7ff feeb 	bl	800110c <LL_SPI_ReceiveData8>
 8001336:	4603      	mov	r3, r0
 8001338:	461a      	mov	r2, r3
 800133a:	4b0e      	ldr	r3, [pc, #56]	; (8001374 <SPI2_IRQHandler+0x90>)
 800133c:	701a      	strb	r2, [r3, #0]

		SPIInterrruptDisable(SPI2);
 800133e:	480c      	ldr	r0, [pc, #48]	; (8001370 <SPI2_IRQHandler+0x8c>)
 8001340:	f7ff f83e 	bl	80003c0 <SPIInterrruptDisable>

		UsartSendString(USART2, (uint8_t*)spi_string);
 8001344:	490c      	ldr	r1, [pc, #48]	; (8001378 <SPI2_IRQHandler+0x94>)
 8001346:	480d      	ldr	r0, [pc, #52]	; (800137c <SPI2_IRQHandler+0x98>)
 8001348:	f7ff f8a7 	bl	800049a <UsartSendString>
		UsartSendByte(USART2, buffer); UsartNewLine(USART2); UsartNewLine(USART2);
 800134c:	4b09      	ldr	r3, [pc, #36]	; (8001374 <SPI2_IRQHandler+0x90>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	4619      	mov	r1, r3
 8001352:	480a      	ldr	r0, [pc, #40]	; (800137c <SPI2_IRQHandler+0x98>)
 8001354:	f7ff f88b 	bl	800046e <UsartSendByte>
 8001358:	4808      	ldr	r0, [pc, #32]	; (800137c <SPI2_IRQHandler+0x98>)
 800135a:	f7ff f8bf 	bl	80004dc <UsartNewLine>
 800135e:	4807      	ldr	r0, [pc, #28]	; (800137c <SPI2_IRQHandler+0x98>)
 8001360:	f7ff f8bc 	bl	80004dc <UsartNewLine>

		LL_USART_EnableIT_RXNE(USART2);
 8001364:	4805      	ldr	r0, [pc, #20]	; (800137c <SPI2_IRQHandler+0x98>)
 8001366:	f7ff ff05 	bl	8001174 <LL_USART_EnableIT_RXNE>
	}
}
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40003800 	.word	0x40003800
 8001374:	20000020 	.word	0x20000020
 8001378:	08002a6c 	.word	0x08002a6c
 800137c:	40004400 	.word	0x40004400

08001380 <USART2_IRQHandler>:

void USART2_IRQHandler(void){
 8001380:	b580      	push	{r7, lr}
 8001382:	af00      	add	r7, sp, #0
	if(LL_USART_IsEnabledIT_TXE(USART2) && LL_USART_IsActiveFlag_TXE(USART2)){
 8001384:	481c      	ldr	r0, [pc, #112]	; (80013f8 <USART2_IRQHandler+0x78>)
 8001386:	f7ff ff8c 	bl	80012a2 <LL_USART_IsEnabledIT_TXE>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d018      	beq.n	80013c2 <USART2_IRQHandler+0x42>
 8001390:	4819      	ldr	r0, [pc, #100]	; (80013f8 <USART2_IRQHandler+0x78>)
 8001392:	f7ff fedc 	bl	800114e <LL_USART_IsActiveFlag_TXE>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d012      	beq.n	80013c2 <USART2_IRQHandler+0x42>
		UsartSendString(USART2, (uint8_t*)usart_string);
 800139c:	4917      	ldr	r1, [pc, #92]	; (80013fc <USART2_IRQHandler+0x7c>)
 800139e:	4816      	ldr	r0, [pc, #88]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013a0:	f7ff f87b 	bl	800049a <UsartSendString>
		UsartSendByte(USART2, buffer); UsartNewLine(USART2);
 80013a4:	4b16      	ldr	r3, [pc, #88]	; (8001400 <USART2_IRQHandler+0x80>)
 80013a6:	781b      	ldrb	r3, [r3, #0]
 80013a8:	4619      	mov	r1, r3
 80013aa:	4813      	ldr	r0, [pc, #76]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013ac:	f7ff f85f 	bl	800046e <UsartSendByte>
 80013b0:	4811      	ldr	r0, [pc, #68]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013b2:	f7ff f893 	bl	80004dc <UsartNewLine>

		LL_USART_DisableIT_TXE(USART2);
 80013b6:	4810      	ldr	r0, [pc, #64]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013b8:	f7ff ff3f 	bl	800123a <LL_USART_DisableIT_TXE>

		SPIInterrruptEnable(SPI2);
 80013bc:	4811      	ldr	r0, [pc, #68]	; (8001404 <USART2_IRQHandler+0x84>)
 80013be:	f7fe ffe9 	bl	8000394 <SPIInterrruptEnable>
	}

	if(LL_USART_IsEnabledIT_RXNE(USART2) && LL_USART_IsActiveFlag_RXNE(USART2)){
 80013c2:	480d      	ldr	r0, [pc, #52]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013c4:	f7ff ff5a 	bl	800127c <LL_USART_IsEnabledIT_RXNE>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d012      	beq.n	80013f4 <USART2_IRQHandler+0x74>
 80013ce:	480a      	ldr	r0, [pc, #40]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013d0:	f7ff feaa 	bl	8001128 <LL_USART_IsActiveFlag_RXNE>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d00c      	beq.n	80013f4 <USART2_IRQHandler+0x74>
		buffer = LL_USART_ReceiveData8(USART2);
 80013da:	4807      	ldr	r0, [pc, #28]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013dc:	f7ff ff74 	bl	80012c8 <LL_USART_ReceiveData8>
 80013e0:	4603      	mov	r3, r0
 80013e2:	461a      	mov	r2, r3
 80013e4:	4b06      	ldr	r3, [pc, #24]	; (8001400 <USART2_IRQHandler+0x80>)
 80013e6:	701a      	strb	r2, [r3, #0]

		LL_USART_DisableIT_RXNE(USART2);
 80013e8:	4803      	ldr	r0, [pc, #12]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013ea:	f7ff ff05 	bl	80011f8 <LL_USART_DisableIT_RXNE>
		LL_USART_EnableIT_TXE(USART2);
 80013ee:	4802      	ldr	r0, [pc, #8]	; (80013f8 <USART2_IRQHandler+0x78>)
 80013f0:	f7ff fee1 	bl	80011b6 <LL_USART_EnableIT_TXE>
	}
}
 80013f4:	bf00      	nop
 80013f6:	bd80      	pop	{r7, pc}
 80013f8:	40004400 	.word	0x40004400
 80013fc:	08002a48 	.word	0x08002a48
 8001400:	20000020 	.word	0x20000020
 8001404:	40003800 	.word	0x40003800

08001408 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 800140c:	4b06      	ldr	r3, [pc, #24]	; (8001428 <SystemInit+0x20>)
 800140e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001412:	4a05      	ldr	r2, [pc, #20]	; (8001428 <SystemInit+0x20>)
 8001414:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001418:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 800141c:	bf00      	nop
 800141e:	46bd      	mov	sp, r7
 8001420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001424:	4770      	bx	lr
 8001426:	bf00      	nop
 8001428:	e000ed00 	.word	0xe000ed00

0800142c <__NVIC_GetPriorityGrouping>:
{
 800142c:	b480      	push	{r7}
 800142e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001430:	4b04      	ldr	r3, [pc, #16]	; (8001444 <__NVIC_GetPriorityGrouping+0x18>)
 8001432:	68db      	ldr	r3, [r3, #12]
 8001434:	0a1b      	lsrs	r3, r3, #8
 8001436:	f003 0307 	and.w	r3, r3, #7
}
 800143a:	4618      	mov	r0, r3
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	e000ed00 	.word	0xe000ed00

08001448 <__NVIC_EnableIRQ>:
{
 8001448:	b480      	push	{r7}
 800144a:	b083      	sub	sp, #12
 800144c:	af00      	add	r7, sp, #0
 800144e:	4603      	mov	r3, r0
 8001450:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001452:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001456:	2b00      	cmp	r3, #0
 8001458:	db0b      	blt.n	8001472 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	f003 021f 	and.w	r2, r3, #31
 8001460:	4907      	ldr	r1, [pc, #28]	; (8001480 <__NVIC_EnableIRQ+0x38>)
 8001462:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001466:	095b      	lsrs	r3, r3, #5
 8001468:	2001      	movs	r0, #1
 800146a:	fa00 f202 	lsl.w	r2, r0, r2
 800146e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8001472:	bf00      	nop
 8001474:	370c      	adds	r7, #12
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	e000e100 	.word	0xe000e100

08001484 <__NVIC_SetPriority>:
{
 8001484:	b480      	push	{r7}
 8001486:	b083      	sub	sp, #12
 8001488:	af00      	add	r7, sp, #0
 800148a:	4603      	mov	r3, r0
 800148c:	6039      	str	r1, [r7, #0]
 800148e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001490:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001494:	2b00      	cmp	r3, #0
 8001496:	db0a      	blt.n	80014ae <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001498:	683b      	ldr	r3, [r7, #0]
 800149a:	b2da      	uxtb	r2, r3
 800149c:	490c      	ldr	r1, [pc, #48]	; (80014d0 <__NVIC_SetPriority+0x4c>)
 800149e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014a2:	0112      	lsls	r2, r2, #4
 80014a4:	b2d2      	uxtb	r2, r2
 80014a6:	440b      	add	r3, r1
 80014a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80014ac:	e00a      	b.n	80014c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014ae:	683b      	ldr	r3, [r7, #0]
 80014b0:	b2da      	uxtb	r2, r3
 80014b2:	4908      	ldr	r1, [pc, #32]	; (80014d4 <__NVIC_SetPriority+0x50>)
 80014b4:	79fb      	ldrb	r3, [r7, #7]
 80014b6:	f003 030f 	and.w	r3, r3, #15
 80014ba:	3b04      	subs	r3, #4
 80014bc:	0112      	lsls	r2, r2, #4
 80014be:	b2d2      	uxtb	r2, r2
 80014c0:	440b      	add	r3, r1
 80014c2:	761a      	strb	r2, [r3, #24]
}
 80014c4:	bf00      	nop
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	e000e100 	.word	0xe000e100
 80014d4:	e000ed00 	.word	0xe000ed00

080014d8 <NVIC_EncodePriority>:
{
 80014d8:	b480      	push	{r7}
 80014da:	b089      	sub	sp, #36	; 0x24
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	60b9      	str	r1, [r7, #8]
 80014e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80014e4:	68fb      	ldr	r3, [r7, #12]
 80014e6:	f003 0307 	and.w	r3, r3, #7
 80014ea:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	f1c3 0307 	rsb	r3, r3, #7
 80014f2:	2b04      	cmp	r3, #4
 80014f4:	bf28      	it	cs
 80014f6:	2304      	movcs	r3, #4
 80014f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80014fa:	69fb      	ldr	r3, [r7, #28]
 80014fc:	3304      	adds	r3, #4
 80014fe:	2b06      	cmp	r3, #6
 8001500:	d902      	bls.n	8001508 <NVIC_EncodePriority+0x30>
 8001502:	69fb      	ldr	r3, [r7, #28]
 8001504:	3b03      	subs	r3, #3
 8001506:	e000      	b.n	800150a <NVIC_EncodePriority+0x32>
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800150c:	f04f 32ff 	mov.w	r2, #4294967295
 8001510:	69bb      	ldr	r3, [r7, #24]
 8001512:	fa02 f303 	lsl.w	r3, r2, r3
 8001516:	43da      	mvns	r2, r3
 8001518:	68bb      	ldr	r3, [r7, #8]
 800151a:	401a      	ands	r2, r3
 800151c:	697b      	ldr	r3, [r7, #20]
 800151e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001520:	f04f 31ff 	mov.w	r1, #4294967295
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	fa01 f303 	lsl.w	r3, r1, r3
 800152a:	43d9      	mvns	r1, r3
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001530:	4313      	orrs	r3, r2
}
 8001532:	4618      	mov	r0, r3
 8001534:	3724      	adds	r7, #36	; 0x24
 8001536:	46bd      	mov	sp, r7
 8001538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800153c:	4770      	bx	lr
	...

08001540 <LL_RCC_SetUSARTClockSource>:
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CCIPR, (USARTxSource >> 16U), (USARTxSource & 0x0000FFFFU));
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <LL_RCC_SetUSARTClockSource+0x30>)
 800154a:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	0c1b      	lsrs	r3, r3, #16
 8001552:	43db      	mvns	r3, r3
 8001554:	401a      	ands	r2, r3
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	b29b      	uxth	r3, r3
 800155a:	4905      	ldr	r1, [pc, #20]	; (8001570 <LL_RCC_SetUSARTClockSource+0x30>)
 800155c:	4313      	orrs	r3, r2
 800155e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
}
 8001562:	bf00      	nop
 8001564:	370c      	adds	r7, #12
 8001566:	46bd      	mov	sp, r7
 8001568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800156c:	4770      	bx	lr
 800156e:	bf00      	nop
 8001570:	40021000 	.word	0x40021000

08001574 <LL_AHB2_GRP1_EnableClock>:
{
 8001574:	b480      	push	{r7}
 8001576:	b085      	sub	sp, #20
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->AHB2ENR, Periphs);
 800157c:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800157e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8001580:	4907      	ldr	r1, [pc, #28]	; (80015a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	4313      	orrs	r3, r2
 8001586:	64cb      	str	r3, [r1, #76]	; 0x4c
  tmpreg = READ_BIT(RCC->AHB2ENR, Periphs);
 8001588:	4b05      	ldr	r3, [pc, #20]	; (80015a0 <LL_AHB2_GRP1_EnableClock+0x2c>)
 800158a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	4013      	ands	r3, r2
 8001590:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8001592:	68fb      	ldr	r3, [r7, #12]
}
 8001594:	bf00      	nop
 8001596:	3714      	adds	r7, #20
 8001598:	46bd      	mov	sp, r7
 800159a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159e:	4770      	bx	lr
 80015a0:	40021000 	.word	0x40021000

080015a4 <LL_APB1_GRP1_EnableClock>:
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  SET_BIT(RCC->APB1ENR1, Periphs);
 80015ac:	4b08      	ldr	r3, [pc, #32]	; (80015d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ae:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015b0:	4907      	ldr	r1, [pc, #28]	; (80015d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	4313      	orrs	r3, r2
 80015b6:	658b      	str	r3, [r1, #88]	; 0x58
  tmpreg = READ_BIT(RCC->APB1ENR1, Periphs);
 80015b8:	4b05      	ldr	r3, [pc, #20]	; (80015d0 <LL_APB1_GRP1_EnableClock+0x2c>)
 80015ba:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	4013      	ands	r3, r2
 80015c0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80015c2:	68fb      	ldr	r3, [r7, #12]
}
 80015c4:	bf00      	nop
 80015c6:	3714      	adds	r7, #20
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr
 80015d0:	40021000 	.word	0x40021000

080015d4 <LL_USART_Enable>:
{
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f043 0201 	orr.w	r2, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	601a      	str	r2, [r3, #0]
}
 80015e8:	bf00      	nop
 80015ea:	370c      	adds	r7, #12
 80015ec:	46bd      	mov	sp, r7
 80015ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f2:	4770      	bx	lr

080015f4 <LL_USART_ConfigAsyncMode>:
{
 80015f4:	b480      	push	{r7}
 80015f6:	b083      	sub	sp, #12
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN | USART_CR3_HDSEL));
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 022a 	bic.w	r2, r3, #42	; 0x2a
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	609a      	str	r2, [r3, #8]
}
 8001614:	bf00      	nop
 8001616:	370c      	adds	r7, #12
 8001618:	46bd      	mov	sp, r7
 800161a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161e:	4770      	bx	lr

08001620 <MX_USART2_UART_Init>:
/* USER CODE END 0 */

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08e      	sub	sp, #56	; 0x38
 8001624:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN USART2_Init 0 */

  /* USER CODE END USART2_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	2200      	movs	r2, #0
 800162c:	601a      	str	r2, [r3, #0]
 800162e:	605a      	str	r2, [r3, #4]
 8001630:	609a      	str	r2, [r3, #8]
 8001632:	60da      	str	r2, [r3, #12]
 8001634:	611a      	str	r2, [r3, #16]
 8001636:	615a      	str	r2, [r3, #20]
 8001638:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 800163a:	1d3b      	adds	r3, r7, #4
 800163c:	2200      	movs	r2, #0
 800163e:	601a      	str	r2, [r3, #0]
 8001640:	605a      	str	r2, [r3, #4]
 8001642:	609a      	str	r2, [r3, #8]
 8001644:	60da      	str	r2, [r3, #12]
 8001646:	611a      	str	r2, [r3, #16]
 8001648:	615a      	str	r2, [r3, #20]

  LL_RCC_SetUSARTClockSource(LL_RCC_USART2_CLKSOURCE_PCLK1);
 800164a:	f44f 2040 	mov.w	r0, #786432	; 0xc0000
 800164e:	f7ff ff77 	bl	8001540 <LL_RCC_SetUSARTClockSource>

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_USART2);
 8001652:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8001656:	f7ff ffa5 	bl	80015a4 <LL_APB1_GRP1_EnableClock>

  LL_AHB2_GRP1_EnableClock(LL_AHB2_GRP1_PERIPH_GPIOA);
 800165a:	2001      	movs	r0, #1
 800165c:	f7ff ff8a 	bl	8001574 <LL_AHB2_GRP1_EnableClock>
  /**USART2 GPIO Configuration
  PA2   ------> USART2_TX
  PA3   ------> USART2_RX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_2|LL_GPIO_PIN_3;
 8001660:	230c      	movs	r3, #12
 8001662:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8001664:	2302      	movs	r3, #2
 8001666:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8001670:	2300      	movs	r3, #0
 8001672:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_7;
 8001674:	2307      	movs	r3, #7
 8001676:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001678:	1d3b      	adds	r3, r7, #4
 800167a:	4619      	mov	r1, r3
 800167c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001680:	f000 fbcb 	bl	8001e1a <LL_GPIO_Init>

  /* USART2 interrupt Init */
  NVIC_SetPriority(USART2_IRQn, NVIC_EncodePriority(NVIC_GetPriorityGrouping(),0, 0));
 8001684:	f7ff fed2 	bl	800142c <__NVIC_GetPriorityGrouping>
 8001688:	4603      	mov	r3, r0
 800168a:	2200      	movs	r2, #0
 800168c:	2100      	movs	r1, #0
 800168e:	4618      	mov	r0, r3
 8001690:	f7ff ff22 	bl	80014d8 <NVIC_EncodePriority>
 8001694:	4603      	mov	r3, r0
 8001696:	4619      	mov	r1, r3
 8001698:	2026      	movs	r0, #38	; 0x26
 800169a:	f7ff fef3 	bl	8001484 <__NVIC_SetPriority>
  NVIC_EnableIRQ(USART2_IRQn);
 800169e:	2026      	movs	r0, #38	; 0x26
 80016a0:	f7ff fed2 	bl	8001448 <__NVIC_EnableIRQ>

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 80016a4:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 80016a8:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 80016aa:	2300      	movs	r3, #0
 80016ac:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_2;
 80016ae:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016b2:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 80016b4:	2300      	movs	r3, #0
 80016b6:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 80016b8:	230c      	movs	r3, #12
 80016ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.HardwareFlowControl = LL_USART_HWCONTROL_NONE;
 80016bc:	2300      	movs	r3, #0
 80016be:	633b      	str	r3, [r7, #48]	; 0x30
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 80016c0:	2300      	movs	r3, #0
 80016c2:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(USART2, &USART_InitStruct);
 80016c4:	f107 031c 	add.w	r3, r7, #28
 80016c8:	4619      	mov	r1, r3
 80016ca:	4806      	ldr	r0, [pc, #24]	; (80016e4 <MX_USART2_UART_Init+0xc4>)
 80016cc:	f001 f8d0 	bl	8002870 <LL_USART_Init>
  LL_USART_ConfigAsyncMode(USART2);
 80016d0:	4804      	ldr	r0, [pc, #16]	; (80016e4 <MX_USART2_UART_Init+0xc4>)
 80016d2:	f7ff ff8f 	bl	80015f4 <LL_USART_ConfigAsyncMode>
  LL_USART_Enable(USART2);
 80016d6:	4803      	ldr	r0, [pc, #12]	; (80016e4 <MX_USART2_UART_Init+0xc4>)
 80016d8:	f7ff ff7c 	bl	80015d4 <LL_USART_Enable>
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016dc:	bf00      	nop
 80016de:	3738      	adds	r7, #56	; 0x38
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}
 80016e4:	40004400 	.word	0x40004400

080016e8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80016e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001720 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80016ec:	f7ff fe8c 	bl	8001408 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80016f0:	480c      	ldr	r0, [pc, #48]	; (8001724 <LoopForever+0x6>)
  ldr r1, =_edata
 80016f2:	490d      	ldr	r1, [pc, #52]	; (8001728 <LoopForever+0xa>)
  ldr r2, =_sidata
 80016f4:	4a0d      	ldr	r2, [pc, #52]	; (800172c <LoopForever+0xe>)
  movs r3, #0
 80016f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016f8:	e002      	b.n	8001700 <LoopCopyDataInit>

080016fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016fe:	3304      	adds	r3, #4

08001700 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001700:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001702:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001704:	d3f9      	bcc.n	80016fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001706:	4a0a      	ldr	r2, [pc, #40]	; (8001730 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001708:	4c0a      	ldr	r4, [pc, #40]	; (8001734 <LoopForever+0x16>)
  movs r3, #0
 800170a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800170c:	e001      	b.n	8001712 <LoopFillZerobss>

0800170e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800170e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001710:	3204      	adds	r2, #4

08001712 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001712:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001714:	d3fb      	bcc.n	800170e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001716:	f001 f967 	bl	80029e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800171a:	f7ff faa1 	bl	8000c60 <main>

0800171e <LoopForever>:

LoopForever:
    b LoopForever
 800171e:	e7fe      	b.n	800171e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001720:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001724:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001728:	20000004 	.word	0x20000004
  ldr r2, =_sidata
 800172c:	08002adc 	.word	0x08002adc
  ldr r2, =_sbss
 8001730:	20000004 	.word	0x20000004
  ldr r4, =_ebss
 8001734:	20000024 	.word	0x20000024

08001738 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001738:	e7fe      	b.n	8001738 <ADC1_2_IRQHandler>
	...

0800173c <LL_EXTI_EnableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_0_31(uint32_t ExtiLine)
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR1, ExtiLine);
 8001744:	4b05      	ldr	r3, [pc, #20]	; (800175c <LL_EXTI_EnableIT_0_31+0x20>)
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	4904      	ldr	r1, [pc, #16]	; (800175c <LL_EXTI_EnableIT_0_31+0x20>)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4313      	orrs	r3, r2
 800174e:	600b      	str	r3, [r1, #0]
}
 8001750:	bf00      	nop
 8001752:	370c      	adds	r7, #12
 8001754:	46bd      	mov	sp, r7
 8001756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175a:	4770      	bx	lr
 800175c:	40010400 	.word	0x40010400

08001760 <LL_EXTI_EnableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableIT_32_63(uint32_t ExtiLine)
{
 8001760:	b480      	push	{r7}
 8001762:	b083      	sub	sp, #12
 8001764:	af00      	add	r7, sp, #0
 8001766:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->IMR2, ExtiLine);
 8001768:	4b05      	ldr	r3, [pc, #20]	; (8001780 <LL_EXTI_EnableIT_32_63+0x20>)
 800176a:	6a1a      	ldr	r2, [r3, #32]
 800176c:	4904      	ldr	r1, [pc, #16]	; (8001780 <LL_EXTI_EnableIT_32_63+0x20>)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	4313      	orrs	r3, r2
 8001772:	620b      	str	r3, [r1, #32]
}
 8001774:	bf00      	nop
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177e:	4770      	bx	lr
 8001780:	40010400 	.word	0x40010400

08001784 <LL_EXTI_DisableIT_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_0_31(uint32_t ExtiLine)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR1, ExtiLine);
 800178c:	4b06      	ldr	r3, [pc, #24]	; (80017a8 <LL_EXTI_DisableIT_0_31+0x24>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	43db      	mvns	r3, r3
 8001794:	4904      	ldr	r1, [pc, #16]	; (80017a8 <LL_EXTI_DisableIT_0_31+0x24>)
 8001796:	4013      	ands	r3, r2
 8001798:	600b      	str	r3, [r1, #0]
}
 800179a:	bf00      	nop
 800179c:	370c      	adds	r7, #12
 800179e:	46bd      	mov	sp, r7
 80017a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017a4:	4770      	bx	lr
 80017a6:	bf00      	nop
 80017a8:	40010400 	.word	0x40010400

080017ac <LL_EXTI_DisableIT_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableIT_32_63(uint32_t ExtiLine)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b083      	sub	sp, #12
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->IMR2, ExtiLine);
 80017b4:	4b06      	ldr	r3, [pc, #24]	; (80017d0 <LL_EXTI_DisableIT_32_63+0x24>)
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	43db      	mvns	r3, r3
 80017bc:	4904      	ldr	r1, [pc, #16]	; (80017d0 <LL_EXTI_DisableIT_32_63+0x24>)
 80017be:	4013      	ands	r3, r2
 80017c0:	620b      	str	r3, [r1, #32]
}
 80017c2:	bf00      	nop
 80017c4:	370c      	adds	r7, #12
 80017c6:	46bd      	mov	sp, r7
 80017c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017cc:	4770      	bx	lr
 80017ce:	bf00      	nop
 80017d0:	40010400 	.word	0x40010400

080017d4 <LL_EXTI_EnableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_0_31(uint32_t ExtiLine)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR1, ExtiLine);
 80017dc:	4b05      	ldr	r3, [pc, #20]	; (80017f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017de:	685a      	ldr	r2, [r3, #4]
 80017e0:	4904      	ldr	r1, [pc, #16]	; (80017f4 <LL_EXTI_EnableEvent_0_31+0x20>)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4313      	orrs	r3, r2
 80017e6:	604b      	str	r3, [r1, #4]

}
 80017e8:	bf00      	nop
 80017ea:	370c      	adds	r7, #12
 80017ec:	46bd      	mov	sp, r7
 80017ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f2:	4770      	bx	lr
 80017f4:	40010400 	.word	0x40010400

080017f8 <LL_EXTI_EnableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableEvent_32_63(uint32_t ExtiLine)
{
 80017f8:	b480      	push	{r7}
 80017fa:	b083      	sub	sp, #12
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->EMR2, ExtiLine);
 8001800:	4b05      	ldr	r3, [pc, #20]	; (8001818 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001802:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001804:	4904      	ldr	r1, [pc, #16]	; (8001818 <LL_EXTI_EnableEvent_32_63+0x20>)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	4313      	orrs	r3, r2
 800180a:	624b      	str	r3, [r1, #36]	; 0x24
}
 800180c:	bf00      	nop
 800180e:	370c      	adds	r7, #12
 8001810:	46bd      	mov	sp, r7
 8001812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001816:	4770      	bx	lr
 8001818:	40010400 	.word	0x40010400

0800181c <LL_EXTI_DisableEvent_0_31>:
  *         @arg @ref LL_EXTI_LINE_ALL_0_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_0_31(uint32_t ExtiLine)
{
 800181c:	b480      	push	{r7}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR1, ExtiLine);
 8001824:	4b06      	ldr	r3, [pc, #24]	; (8001840 <LL_EXTI_DisableEvent_0_31+0x24>)
 8001826:	685a      	ldr	r2, [r3, #4]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	43db      	mvns	r3, r3
 800182c:	4904      	ldr	r1, [pc, #16]	; (8001840 <LL_EXTI_DisableEvent_0_31+0x24>)
 800182e:	4013      	ands	r3, r2
 8001830:	604b      	str	r3, [r1, #4]
}
 8001832:	bf00      	nop
 8001834:	370c      	adds	r7, #12
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	40010400 	.word	0x40010400

08001844 <LL_EXTI_DisableEvent_32_63>:
  *         @arg @ref LL_EXTI_LINE_ALL_32_63
  * @note   (*): Available in some devices
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableEvent_32_63(uint32_t ExtiLine)
{
 8001844:	b480      	push	{r7}
 8001846:	b083      	sub	sp, #12
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->EMR2, ExtiLine);
 800184c:	4b06      	ldr	r3, [pc, #24]	; (8001868 <LL_EXTI_DisableEvent_32_63+0x24>)
 800184e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	43db      	mvns	r3, r3
 8001854:	4904      	ldr	r1, [pc, #16]	; (8001868 <LL_EXTI_DisableEvent_32_63+0x24>)
 8001856:	4013      	ands	r3, r2
 8001858:	624b      	str	r3, [r1, #36]	; 0x24
}
 800185a:	bf00      	nop
 800185c:	370c      	adds	r7, #12
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	40010400 	.word	0x40010400

0800186c <LL_EXTI_EnableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_0_31(uint32_t ExtiLine)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR1, ExtiLine);
 8001874:	4b05      	ldr	r3, [pc, #20]	; (800188c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 8001876:	689a      	ldr	r2, [r3, #8]
 8001878:	4904      	ldr	r1, [pc, #16]	; (800188c <LL_EXTI_EnableRisingTrig_0_31+0x20>)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4313      	orrs	r3, r2
 800187e:	608b      	str	r3, [r1, #8]

}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	40010400 	.word	0x40010400

08001890 <LL_EXTI_EnableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableRisingTrig_32_63(uint32_t ExtiLine)
{
 8001890:	b480      	push	{r7}
 8001892:	b083      	sub	sp, #12
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->RTSR2, ExtiLine);
 8001898:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800189a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800189c:	4904      	ldr	r1, [pc, #16]	; (80018b0 <LL_EXTI_EnableRisingTrig_32_63+0x20>)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	4313      	orrs	r3, r2
 80018a2:	628b      	str	r3, [r1, #40]	; 0x28
}
 80018a4:	bf00      	nop
 80018a6:	370c      	adds	r7, #12
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40010400 	.word	0x40010400

080018b4 <LL_EXTI_DisableRisingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_0_31(uint32_t ExtiLine)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b083      	sub	sp, #12
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR1, ExtiLine);
 80018bc:	4b06      	ldr	r3, [pc, #24]	; (80018d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80018be:	689a      	ldr	r2, [r3, #8]
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	43db      	mvns	r3, r3
 80018c4:	4904      	ldr	r1, [pc, #16]	; (80018d8 <LL_EXTI_DisableRisingTrig_0_31+0x24>)
 80018c6:	4013      	ands	r3, r2
 80018c8:	608b      	str	r3, [r1, #8]

}
 80018ca:	bf00      	nop
 80018cc:	370c      	adds	r7, #12
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	40010400 	.word	0x40010400

080018dc <LL_EXTI_DisableRisingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableRisingTrig_32_63(uint32_t ExtiLine)
{
 80018dc:	b480      	push	{r7}
 80018de:	b083      	sub	sp, #12
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->RTSR2, ExtiLine);
 80018e4:	4b06      	ldr	r3, [pc, #24]	; (8001900 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80018e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	4904      	ldr	r1, [pc, #16]	; (8001900 <LL_EXTI_DisableRisingTrig_32_63+0x24>)
 80018ee:	4013      	ands	r3, r2
 80018f0:	628b      	str	r3, [r1, #40]	; 0x28
}
 80018f2:	bf00      	nop
 80018f4:	370c      	adds	r7, #12
 80018f6:	46bd      	mov	sp, r7
 80018f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fc:	4770      	bx	lr
 80018fe:	bf00      	nop
 8001900:	40010400 	.word	0x40010400

08001904 <LL_EXTI_EnableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_0_31(uint32_t ExtiLine)
{
 8001904:	b480      	push	{r7}
 8001906:	b083      	sub	sp, #12
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR1, ExtiLine);
 800190c:	4b05      	ldr	r3, [pc, #20]	; (8001924 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 800190e:	68da      	ldr	r2, [r3, #12]
 8001910:	4904      	ldr	r1, [pc, #16]	; (8001924 <LL_EXTI_EnableFallingTrig_0_31+0x20>)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	4313      	orrs	r3, r2
 8001916:	60cb      	str	r3, [r1, #12]
}
 8001918:	bf00      	nop
 800191a:	370c      	adds	r7, #12
 800191c:	46bd      	mov	sp, r7
 800191e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001922:	4770      	bx	lr
 8001924:	40010400 	.word	0x40010400

08001928 <LL_EXTI_EnableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_EnableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001928:	b480      	push	{r7}
 800192a:	b083      	sub	sp, #12
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  SET_BIT(EXTI->FTSR2, ExtiLine);
 8001930:	4b05      	ldr	r3, [pc, #20]	; (8001948 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001932:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001934:	4904      	ldr	r1, [pc, #16]	; (8001948 <LL_EXTI_EnableFallingTrig_32_63+0x20>)
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4313      	orrs	r3, r2
 800193a:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800193c:	bf00      	nop
 800193e:	370c      	adds	r7, #12
 8001940:	46bd      	mov	sp, r7
 8001942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001946:	4770      	bx	lr
 8001948:	40010400 	.word	0x40010400

0800194c <LL_EXTI_DisableFallingTrig_0_31>:
  *         @arg @ref LL_EXTI_LINE_31
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_0_31(uint32_t ExtiLine)
{
 800194c:	b480      	push	{r7}
 800194e:	b083      	sub	sp, #12
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR1, ExtiLine);
 8001954:	4b06      	ldr	r3, [pc, #24]	; (8001970 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 8001956:	68da      	ldr	r2, [r3, #12]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	43db      	mvns	r3, r3
 800195c:	4904      	ldr	r1, [pc, #16]	; (8001970 <LL_EXTI_DisableFallingTrig_0_31+0x24>)
 800195e:	4013      	ands	r3, r2
 8001960:	60cb      	str	r3, [r1, #12]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	40010400 	.word	0x40010400

08001974 <LL_EXTI_DisableFallingTrig_32_63>:
  *         @arg @ref LL_EXTI_LINE_37
  *         @arg @ref LL_EXTI_LINE_38
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_DisableFallingTrig_32_63(uint32_t ExtiLine)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  CLEAR_BIT(EXTI->FTSR2, ExtiLine);
 800197c:	4b06      	ldr	r3, [pc, #24]	; (8001998 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 800197e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	43db      	mvns	r3, r3
 8001984:	4904      	ldr	r1, [pc, #16]	; (8001998 <LL_EXTI_DisableFallingTrig_32_63+0x24>)
 8001986:	4013      	ands	r3, r2
 8001988:	62cb      	str	r3, [r1, #44]	; 0x2c
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001994:	4770      	bx	lr
 8001996:	bf00      	nop
 8001998:	40010400 	.word	0x40010400

0800199c <LL_EXTI_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - 0x00: EXTI registers are initialized
  *          - any other value : wrong configuration
  */
uint32_t LL_EXTI_Init(LL_EXTI_InitTypeDef *EXTI_InitStruct)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b084      	sub	sp, #16
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  uint32_t status = 0x00u;
 80019a4:	2300      	movs	r3, #0
 80019a6:	60fb      	str	r3, [r7, #12]
  assert_param(IS_LL_EXTI_LINE_32_63(EXTI_InitStruct->Line_32_63));
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->LineCommand));
  assert_param(IS_LL_EXTI_MODE(EXTI_InitStruct->Mode));

  /* ENABLE LineCommand */
  if (EXTI_InitStruct->LineCommand != DISABLE)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	7a1b      	ldrb	r3, [r3, #8]
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	f000 80d0 	beq.w	8001b52 <LL_EXTI_Init+0x1b6>
  {
    assert_param(IS_LL_EXTI_TRIGGER(EXTI_InitStruct->Trigger));

    /* Configure EXTI Lines in range from 0 to 31 */
    if (EXTI_InitStruct->Line_0_31 != LL_EXTI_LINE_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d063      	beq.n	8001a82 <LL_EXTI_Init+0xe6>
    {
      switch (EXTI_InitStruct->Mode)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7a5b      	ldrb	r3, [r3, #9]
 80019be:	2b02      	cmp	r3, #2
 80019c0:	d01c      	beq.n	80019fc <LL_EXTI_Init+0x60>
 80019c2:	2b02      	cmp	r3, #2
 80019c4:	dc25      	bgt.n	8001a12 <LL_EXTI_Init+0x76>
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d002      	beq.n	80019d0 <LL_EXTI_Init+0x34>
 80019ca:	2b01      	cmp	r3, #1
 80019cc:	d00b      	beq.n	80019e6 <LL_EXTI_Init+0x4a>
 80019ce:	e020      	b.n	8001a12 <LL_EXTI_Init+0x76>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	f7ff ff21 	bl	800181c <LL_EXTI_DisableEvent_0_31>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	4618      	mov	r0, r3
 80019e0:	f7ff feac 	bl	800173c <LL_EXTI_EnableIT_0_31>
          break;
 80019e4:	e018      	b.n	8001a18 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4618      	mov	r0, r3
 80019ec:	f7ff feca 	bl	8001784 <LL_EXTI_DisableIT_0_31>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4618      	mov	r0, r3
 80019f6:	f7ff feed 	bl	80017d4 <LL_EXTI_EnableEvent_0_31>
          break;
 80019fa:	e00d      	b.n	8001a18 <LL_EXTI_Init+0x7c>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_0_31(EXTI_InitStruct->Line_0_31);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7ff fe9b 	bl	800173c <LL_EXTI_EnableIT_0_31>
          LL_EXTI_EnableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f7ff fee2 	bl	80017d4 <LL_EXTI_EnableEvent_0_31>
          break;
 8001a10:	e002      	b.n	8001a18 <LL_EXTI_Init+0x7c>
        default:
          status = 0x01u;
 8001a12:	2301      	movs	r3, #1
 8001a14:	60fb      	str	r3, [r7, #12]
          break;
 8001a16:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	7a9b      	ldrb	r3, [r3, #10]
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d030      	beq.n	8001a82 <LL_EXTI_Init+0xe6>
      {
        switch (EXTI_InitStruct->Trigger)
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	7a9b      	ldrb	r3, [r3, #10]
 8001a24:	2b03      	cmp	r3, #3
 8001a26:	d01c      	beq.n	8001a62 <LL_EXTI_Init+0xc6>
 8001a28:	2b03      	cmp	r3, #3
 8001a2a:	dc25      	bgt.n	8001a78 <LL_EXTI_Init+0xdc>
 8001a2c:	2b01      	cmp	r3, #1
 8001a2e:	d002      	beq.n	8001a36 <LL_EXTI_Init+0x9a>
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d00b      	beq.n	8001a4c <LL_EXTI_Init+0xb0>
 8001a34:	e020      	b.n	8001a78 <LL_EXTI_Init+0xdc>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	f7ff ff86 	bl	800194c <LL_EXTI_DisableFallingTrig_0_31>
            /* Then Enable Rising Trigger on provided Lines */
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7ff ff11 	bl	800186c <LL_EXTI_EnableRisingTrig_0_31>
            break;
 8001a4a:	e01a      	b.n	8001a82 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4618      	mov	r0, r3
 8001a52:	f7ff ff2f 	bl	80018b4 <LL_EXTI_DisableRisingTrig_0_31>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f7ff ff52 	bl	8001904 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001a60:	e00f      	b.n	8001a82 <LL_EXTI_Init+0xe6>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff ff00 	bl	800186c <LL_EXTI_EnableRisingTrig_0_31>
            LL_EXTI_EnableFallingTrig_0_31(EXTI_InitStruct->Line_0_31);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4618      	mov	r0, r3
 8001a72:	f7ff ff47 	bl	8001904 <LL_EXTI_EnableFallingTrig_0_31>
            break;
 8001a76:	e004      	b.n	8001a82 <LL_EXTI_Init+0xe6>
          default:
            status |= 0x02u;
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	f043 0302 	orr.w	r3, r3, #2
 8001a7e:	60fb      	str	r3, [r7, #12]
            break;
 8001a80:	bf00      	nop
        }
      }
    }
    /* Configure EXTI Lines in range from 32 to 63 */
    if (EXTI_InitStruct->Line_32_63 != LL_EXTI_LINE_NONE)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d077      	beq.n	8001b7a <LL_EXTI_Init+0x1de>
    {
      switch (EXTI_InitStruct->Mode)
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	7a5b      	ldrb	r3, [r3, #9]
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d01c      	beq.n	8001acc <LL_EXTI_Init+0x130>
 8001a92:	2b02      	cmp	r3, #2
 8001a94:	dc25      	bgt.n	8001ae2 <LL_EXTI_Init+0x146>
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d002      	beq.n	8001aa0 <LL_EXTI_Init+0x104>
 8001a9a:	2b01      	cmp	r3, #1
 8001a9c:	d00b      	beq.n	8001ab6 <LL_EXTI_Init+0x11a>
 8001a9e:	e020      	b.n	8001ae2 <LL_EXTI_Init+0x146>
      {
        case LL_EXTI_MODE_IT:
          /* First Disable Event on provided Lines */
          LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	685b      	ldr	r3, [r3, #4]
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	f7ff fecd 	bl	8001844 <LL_EXTI_DisableEvent_32_63>
          /* Then Enable IT on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff fe56 	bl	8001760 <LL_EXTI_EnableIT_32_63>
          break;
 8001ab4:	e01a      	b.n	8001aec <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_EVENT:
          /* First Disable IT on provided Lines */
          LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	4618      	mov	r0, r3
 8001abc:	f7ff fe76 	bl	80017ac <LL_EXTI_DisableIT_32_63>
          /* Then Enable Event on provided Lines */
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f7ff fe97 	bl	80017f8 <LL_EXTI_EnableEvent_32_63>
          break;
 8001aca:	e00f      	b.n	8001aec <LL_EXTI_Init+0x150>
        case LL_EXTI_MODE_IT_EVENT:
          /* Directly Enable IT & Event on provided Lines */
          LL_EXTI_EnableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7ff fe45 	bl	8001760 <LL_EXTI_EnableIT_32_63>
          LL_EXTI_EnableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	685b      	ldr	r3, [r3, #4]
 8001ada:	4618      	mov	r0, r3
 8001adc:	f7ff fe8c 	bl	80017f8 <LL_EXTI_EnableEvent_32_63>
          break;
 8001ae0:	e004      	b.n	8001aec <LL_EXTI_Init+0x150>
        default:
          status |= 0x04u;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
 8001ae4:	f043 0304 	orr.w	r3, r3, #4
 8001ae8:	60fb      	str	r3, [r7, #12]
          break;
 8001aea:	bf00      	nop
      }
      if (EXTI_InitStruct->Trigger != LL_EXTI_TRIGGER_NONE)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	7a9b      	ldrb	r3, [r3, #10]
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d042      	beq.n	8001b7a <LL_EXTI_Init+0x1de>
      {
        switch (EXTI_InitStruct->Trigger)
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	7a9b      	ldrb	r3, [r3, #10]
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d01c      	beq.n	8001b36 <LL_EXTI_Init+0x19a>
 8001afc:	2b03      	cmp	r3, #3
 8001afe:	dc25      	bgt.n	8001b4c <LL_EXTI_Init+0x1b0>
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d002      	beq.n	8001b0a <LL_EXTI_Init+0x16e>
 8001b04:	2b02      	cmp	r3, #2
 8001b06:	d00b      	beq.n	8001b20 <LL_EXTI_Init+0x184>
 8001b08:	e020      	b.n	8001b4c <LL_EXTI_Init+0x1b0>
        {
          case LL_EXTI_TRIGGER_RISING:
            /* First Disable Falling Trigger on provided Lines */
            LL_EXTI_DisableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4618      	mov	r0, r3
 8001b10:	f7ff ff30 	bl	8001974 <LL_EXTI_DisableFallingTrig_32_63>
            /* Then Enable IT on provided Lines */
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	685b      	ldr	r3, [r3, #4]
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f7ff feb9 	bl	8001890 <LL_EXTI_EnableRisingTrig_32_63>
            break;
 8001b1e:	e02c      	b.n	8001b7a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_FALLING:
            /* First Disable Rising Trigger on provided Lines */
            LL_EXTI_DisableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	685b      	ldr	r3, [r3, #4]
 8001b24:	4618      	mov	r0, r3
 8001b26:	f7ff fed9 	bl	80018dc <LL_EXTI_DisableRisingTrig_32_63>
            /* Then Enable Falling Trigger on provided Lines */
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f7ff fefa 	bl	8001928 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001b34:	e021      	b.n	8001b7a <LL_EXTI_Init+0x1de>
          case LL_EXTI_TRIGGER_RISING_FALLING:
            LL_EXTI_EnableRisingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	f7ff fea8 	bl	8001890 <LL_EXTI_EnableRisingTrig_32_63>
            LL_EXTI_EnableFallingTrig_32_63(EXTI_InitStruct->Line_32_63);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	4618      	mov	r0, r3
 8001b46:	f7ff feef 	bl	8001928 <LL_EXTI_EnableFallingTrig_32_63>
            break;
 8001b4a:	e016      	b.n	8001b7a <LL_EXTI_Init+0x1de>
          default:
            status = ERROR;
 8001b4c:	2301      	movs	r3, #1
 8001b4e:	60fb      	str	r3, [r7, #12]
            break;
 8001b50:	e013      	b.n	8001b7a <LL_EXTI_Init+0x1de>
  }
  /* DISABLE LineCommand */
  else
  {
    /* De-configure EXTI Lines in range from 0 to 31 */
    LL_EXTI_DisableIT_0_31(EXTI_InitStruct->Line_0_31);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	4618      	mov	r0, r3
 8001b58:	f7ff fe14 	bl	8001784 <LL_EXTI_DisableIT_0_31>
    LL_EXTI_DisableEvent_0_31(EXTI_InitStruct->Line_0_31);
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	4618      	mov	r0, r3
 8001b62:	f7ff fe5b 	bl	800181c <LL_EXTI_DisableEvent_0_31>
    /* De-configure EXTI Lines in range from 32 to 63 */
    LL_EXTI_DisableIT_32_63(EXTI_InitStruct->Line_32_63);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	685b      	ldr	r3, [r3, #4]
 8001b6a:	4618      	mov	r0, r3
 8001b6c:	f7ff fe1e 	bl	80017ac <LL_EXTI_DisableIT_32_63>
    LL_EXTI_DisableEvent_32_63(EXTI_InitStruct->Line_32_63);
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	4618      	mov	r0, r3
 8001b76:	f7ff fe65 	bl	8001844 <LL_EXTI_DisableEvent_32_63>
  }

  return status;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}

08001b84 <LL_GPIO_SetPinMode>:
{
 8001b84:	b480      	push	{r7}
 8001b86:	b08b      	sub	sp, #44	; 0x2c
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODE0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681a      	ldr	r2, [r3, #0]
 8001b94:	68bb      	ldr	r3, [r7, #8]
 8001b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	fa93 f3a3 	rbit	r3, r3
 8001b9e:	613b      	str	r3, [r7, #16]
  return result;
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001ba4:	69bb      	ldr	r3, [r7, #24]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d101      	bne.n	8001bae <LL_GPIO_SetPinMode+0x2a>
    return 32U;
 8001baa:	2320      	movs	r3, #32
 8001bac:	e003      	b.n	8001bb6 <LL_GPIO_SetPinMode+0x32>
  return __builtin_clz(value);
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	fab3 f383 	clz	r3, r3
 8001bb4:	b2db      	uxtb	r3, r3
 8001bb6:	005b      	lsls	r3, r3, #1
 8001bb8:	2103      	movs	r1, #3
 8001bba:	fa01 f303 	lsl.w	r3, r1, r3
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	401a      	ands	r2, r3
 8001bc2:	68bb      	ldr	r3, [r7, #8]
 8001bc4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bc6:	6a3b      	ldr	r3, [r7, #32]
 8001bc8:	fa93 f3a3 	rbit	r3, r3
 8001bcc:	61fb      	str	r3, [r7, #28]
  return result;
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d101      	bne.n	8001bdc <LL_GPIO_SetPinMode+0x58>
    return 32U;
 8001bd8:	2320      	movs	r3, #32
 8001bda:	e003      	b.n	8001be4 <LL_GPIO_SetPinMode+0x60>
  return __builtin_clz(value);
 8001bdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bde:	fab3 f383 	clz	r3, r3
 8001be2:	b2db      	uxtb	r3, r3
 8001be4:	005b      	lsls	r3, r3, #1
 8001be6:	6879      	ldr	r1, [r7, #4]
 8001be8:	fa01 f303 	lsl.w	r3, r1, r3
 8001bec:	431a      	orrs	r2, r3
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	601a      	str	r2, [r3, #0]
}
 8001bf2:	bf00      	nop
 8001bf4:	372c      	adds	r7, #44	; 0x2c
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfc:	4770      	bx	lr

08001bfe <LL_GPIO_SetPinOutputType>:
{
 8001bfe:	b480      	push	{r7}
 8001c00:	b085      	sub	sp, #20
 8001c02:	af00      	add	r7, sp, #0
 8001c04:	60f8      	str	r0, [r7, #12]
 8001c06:	60b9      	str	r1, [r7, #8]
 8001c08:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	685a      	ldr	r2, [r3, #4]
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	43db      	mvns	r3, r3
 8001c12:	401a      	ands	r2, r3
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	fb01 f303 	mul.w	r3, r1, r3
 8001c1c:	431a      	orrs	r2, r3
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	605a      	str	r2, [r3, #4]
}
 8001c22:	bf00      	nop
 8001c24:	3714      	adds	r7, #20
 8001c26:	46bd      	mov	sp, r7
 8001c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2c:	4770      	bx	lr

08001c2e <LL_GPIO_SetPinSpeed>:
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b08b      	sub	sp, #44	; 0x2c
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDR_OSPEED0 << (POSITION_VAL(Pin) * 2U)),
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	68bb      	ldr	r3, [r7, #8]
 8001c40:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c42:	697b      	ldr	r3, [r7, #20]
 8001c44:	fa93 f3a3 	rbit	r3, r3
 8001c48:	613b      	str	r3, [r7, #16]
  return result;
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d101      	bne.n	8001c58 <LL_GPIO_SetPinSpeed+0x2a>
    return 32U;
 8001c54:	2320      	movs	r3, #32
 8001c56:	e003      	b.n	8001c60 <LL_GPIO_SetPinSpeed+0x32>
  return __builtin_clz(value);
 8001c58:	69bb      	ldr	r3, [r7, #24]
 8001c5a:	fab3 f383 	clz	r3, r3
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	2103      	movs	r1, #3
 8001c64:	fa01 f303 	lsl.w	r3, r1, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	401a      	ands	r2, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c70:	6a3b      	ldr	r3, [r7, #32]
 8001c72:	fa93 f3a3 	rbit	r3, r3
 8001c76:	61fb      	str	r3, [r7, #28]
  return result;
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d101      	bne.n	8001c86 <LL_GPIO_SetPinSpeed+0x58>
    return 32U;
 8001c82:	2320      	movs	r3, #32
 8001c84:	e003      	b.n	8001c8e <LL_GPIO_SetPinSpeed+0x60>
  return __builtin_clz(value);
 8001c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c88:	fab3 f383 	clz	r3, r3
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	6879      	ldr	r1, [r7, #4]
 8001c92:	fa01 f303 	lsl.w	r3, r1, r3
 8001c96:	431a      	orrs	r2, r3
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	609a      	str	r2, [r3, #8]
}
 8001c9c:	bf00      	nop
 8001c9e:	372c      	adds	r7, #44	; 0x2c
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr

08001ca8 <LL_GPIO_SetPinPull>:
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b08b      	sub	sp, #44	; 0x2c
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPD0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	68da      	ldr	r2, [r3, #12]
 8001cb8:	68bb      	ldr	r3, [r7, #8]
 8001cba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	fa93 f3a3 	rbit	r3, r3
 8001cc2:	613b      	str	r3, [r7, #16]
  return result;
 8001cc4:	693b      	ldr	r3, [r7, #16]
 8001cc6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001cc8:	69bb      	ldr	r3, [r7, #24]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <LL_GPIO_SetPinPull+0x2a>
    return 32U;
 8001cce:	2320      	movs	r3, #32
 8001cd0:	e003      	b.n	8001cda <LL_GPIO_SetPinPull+0x32>
  return __builtin_clz(value);
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	fab3 f383 	clz	r3, r3
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	2103      	movs	r1, #3
 8001cde:	fa01 f303 	lsl.w	r3, r1, r3
 8001ce2:	43db      	mvns	r3, r3
 8001ce4:	401a      	ands	r2, r3
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cea:	6a3b      	ldr	r3, [r7, #32]
 8001cec:	fa93 f3a3 	rbit	r3, r3
 8001cf0:	61fb      	str	r3, [r7, #28]
  return result;
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d101      	bne.n	8001d00 <LL_GPIO_SetPinPull+0x58>
    return 32U;
 8001cfc:	2320      	movs	r3, #32
 8001cfe:	e003      	b.n	8001d08 <LL_GPIO_SetPinPull+0x60>
  return __builtin_clz(value);
 8001d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d02:	fab3 f383 	clz	r3, r3
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	005b      	lsls	r3, r3, #1
 8001d0a:	6879      	ldr	r1, [r7, #4]
 8001d0c:	fa01 f303 	lsl.w	r3, r1, r3
 8001d10:	431a      	orrs	r2, r3
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	60da      	str	r2, [r3, #12]
}
 8001d16:	bf00      	nop
 8001d18:	372c      	adds	r7, #44	; 0x2c
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr

08001d22 <LL_GPIO_SetAFPin_0_7>:
{
 8001d22:	b480      	push	{r7}
 8001d24:	b08b      	sub	sp, #44	; 0x2c
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	60f8      	str	r0, [r7, #12]
 8001d2a:	60b9      	str	r1, [r7, #8]
 8001d2c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6a1a      	ldr	r2, [r3, #32]
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d36:	697b      	ldr	r3, [r7, #20]
 8001d38:	fa93 f3a3 	rbit	r3, r3
 8001d3c:	613b      	str	r3, [r7, #16]
  return result;
 8001d3e:	693b      	ldr	r3, [r7, #16]
 8001d40:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d101      	bne.n	8001d4c <LL_GPIO_SetAFPin_0_7+0x2a>
    return 32U;
 8001d48:	2320      	movs	r3, #32
 8001d4a:	e003      	b.n	8001d54 <LL_GPIO_SetAFPin_0_7+0x32>
  return __builtin_clz(value);
 8001d4c:	69bb      	ldr	r3, [r7, #24]
 8001d4e:	fab3 f383 	clz	r3, r3
 8001d52:	b2db      	uxtb	r3, r3
 8001d54:	009b      	lsls	r3, r3, #2
 8001d56:	210f      	movs	r1, #15
 8001d58:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5c:	43db      	mvns	r3, r3
 8001d5e:	401a      	ands	r2, r3
 8001d60:	68bb      	ldr	r3, [r7, #8]
 8001d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d64:	6a3b      	ldr	r3, [r7, #32]
 8001d66:	fa93 f3a3 	rbit	r3, r3
 8001d6a:	61fb      	str	r3, [r7, #28]
  return result;
 8001d6c:	69fb      	ldr	r3, [r7, #28]
 8001d6e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d101      	bne.n	8001d7a <LL_GPIO_SetAFPin_0_7+0x58>
    return 32U;
 8001d76:	2320      	movs	r3, #32
 8001d78:	e003      	b.n	8001d82 <LL_GPIO_SetAFPin_0_7+0x60>
  return __builtin_clz(value);
 8001d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d7c:	fab3 f383 	clz	r3, r3
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	009b      	lsls	r3, r3, #2
 8001d84:	6879      	ldr	r1, [r7, #4]
 8001d86:	fa01 f303 	lsl.w	r3, r1, r3
 8001d8a:	431a      	orrs	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	621a      	str	r2, [r3, #32]
}
 8001d90:	bf00      	nop
 8001d92:	372c      	adds	r7, #44	; 0x2c
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_GPIO_SetAFPin_8_15>:
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b08b      	sub	sp, #44	; 0x2c
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001dac:	68bb      	ldr	r3, [r7, #8]
 8001dae:	0a1b      	lsrs	r3, r3, #8
 8001db0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001db2:	697b      	ldr	r3, [r7, #20]
 8001db4:	fa93 f3a3 	rbit	r3, r3
 8001db8:	613b      	str	r3, [r7, #16]
  return result;
 8001dba:	693b      	ldr	r3, [r7, #16]
 8001dbc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8001dbe:	69bb      	ldr	r3, [r7, #24]
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d101      	bne.n	8001dc8 <LL_GPIO_SetAFPin_8_15+0x2c>
    return 32U;
 8001dc4:	2320      	movs	r3, #32
 8001dc6:	e003      	b.n	8001dd0 <LL_GPIO_SetAFPin_8_15+0x34>
  return __builtin_clz(value);
 8001dc8:	69bb      	ldr	r3, [r7, #24]
 8001dca:	fab3 f383 	clz	r3, r3
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	210f      	movs	r1, #15
 8001dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	401a      	ands	r2, r3
 8001ddc:	68bb      	ldr	r3, [r7, #8]
 8001dde:	0a1b      	lsrs	r3, r3, #8
 8001de0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001de2:	6a3b      	ldr	r3, [r7, #32]
 8001de4:	fa93 f3a3 	rbit	r3, r3
 8001de8:	61fb      	str	r3, [r7, #28]
  return result;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8001dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d101      	bne.n	8001df8 <LL_GPIO_SetAFPin_8_15+0x5c>
    return 32U;
 8001df4:	2320      	movs	r3, #32
 8001df6:	e003      	b.n	8001e00 <LL_GPIO_SetAFPin_8_15+0x64>
  return __builtin_clz(value);
 8001df8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dfa:	fab3 f383 	clz	r3, r3
 8001dfe:	b2db      	uxtb	r3, r3
 8001e00:	009b      	lsls	r3, r3, #2
 8001e02:	6879      	ldr	r1, [r7, #4]
 8001e04:	fa01 f303 	lsl.w	r3, r1, r3
 8001e08:	431a      	orrs	r2, r3
 8001e0a:	68fb      	ldr	r3, [r7, #12]
 8001e0c:	625a      	str	r2, [r3, #36]	; 0x24
}
 8001e0e:	bf00      	nop
 8001e10:	372c      	adds	r7, #44	; 0x2c
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8001e1a:	b580      	push	{r7, lr}
 8001e1c:	b088      	sub	sp, #32
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	6078      	str	r0, [r7, #4]
 8001e22:	6039      	str	r1, [r7, #0]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	fa93 f3a3 	rbit	r3, r3
 8001e30:	60fb      	str	r3, [r7, #12]
  return result;
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8001e36:	697b      	ldr	r3, [r7, #20]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <LL_GPIO_Init+0x26>
    return 32U;
 8001e3c:	2320      	movs	r3, #32
 8001e3e:	e003      	b.n	8001e48 <LL_GPIO_Init+0x2e>
  return __builtin_clz(value);
 8001e40:	697b      	ldr	r3, [r7, #20]
 8001e42:	fab3 f383 	clz	r3, r3
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	61fb      	str	r3, [r7, #28]

  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001e4a:	e048      	b.n	8001ede <LL_GPIO_Init+0xc4>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001uL << pinpos);
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	2101      	movs	r1, #1
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	fa01 f303 	lsl.w	r3, r1, r3
 8001e58:	4013      	ands	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

    if (currentpin != 0x00u)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d03a      	beq.n	8001ed8 <LL_GPIO_Init+0xbe>
    {
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8001e62:	683b      	ldr	r3, [r7, #0]
 8001e64:	685b      	ldr	r3, [r3, #4]
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d003      	beq.n	8001e72 <LL_GPIO_Init+0x58>
 8001e6a:	683b      	ldr	r3, [r7, #0]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	2b02      	cmp	r3, #2
 8001e70:	d10e      	bne.n	8001e90 <LL_GPIO_Init+0x76>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));

        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8001e72:	683b      	ldr	r3, [r7, #0]
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	461a      	mov	r2, r3
 8001e78:	69b9      	ldr	r1, [r7, #24]
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7ff fed7 	bl	8001c2e <LL_GPIO_SetPinSpeed>

        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));

        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, GPIO_InitStruct->Pin, GPIO_InitStruct->OutputType);
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	6819      	ldr	r1, [r3, #0]
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	68db      	ldr	r3, [r3, #12]
 8001e88:	461a      	mov	r2, r3
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff feb7 	bl	8001bfe <LL_GPIO_SetPinOutputType>
      }

      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
 8001e94:	461a      	mov	r2, r3
 8001e96:	69b9      	ldr	r1, [r7, #24]
 8001e98:	6878      	ldr	r0, [r7, #4]
 8001e9a:	f7ff ff05 	bl	8001ca8 <LL_GPIO_SetPinPull>

      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8001e9e:	683b      	ldr	r3, [r7, #0]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	2b02      	cmp	r3, #2
 8001ea4:	d111      	bne.n	8001eca <LL_GPIO_Init+0xb0>
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));

        /* Speed mode configuration */
        if (currentpin < LL_GPIO_PIN_8)
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	2bff      	cmp	r3, #255	; 0xff
 8001eaa:	d807      	bhi.n	8001ebc <LL_GPIO_Init+0xa2>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	695b      	ldr	r3, [r3, #20]
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	69b9      	ldr	r1, [r7, #24]
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff ff34 	bl	8001d22 <LL_GPIO_SetAFPin_0_7>
 8001eba:	e006      	b.n	8001eca <LL_GPIO_Init+0xb0>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	695b      	ldr	r3, [r3, #20]
 8001ec0:	461a      	mov	r2, r3
 8001ec2:	69b9      	ldr	r1, [r7, #24]
 8001ec4:	6878      	ldr	r0, [r7, #4]
 8001ec6:	f7ff ff69 	bl	8001d9c <LL_GPIO_SetAFPin_8_15>
        }
      }

      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	69b9      	ldr	r1, [r7, #24]
 8001ed2:	6878      	ldr	r0, [r7, #4]
 8001ed4:	f7ff fe56 	bl	8001b84 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8001ed8:	69fb      	ldr	r3, [r7, #28]
 8001eda:	3301      	adds	r3, #1
 8001edc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00u)
 8001ede:	683b      	ldr	r3, [r7, #0]
 8001ee0:	681a      	ldr	r2, [r3, #0]
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d1af      	bne.n	8001e4c <LL_GPIO_Init+0x32>
  }

  return (SUCCESS);
 8001eec:	2300      	movs	r3, #0
}
 8001eee:	4618      	mov	r0, r3
 8001ef0:	3720      	adds	r7, #32
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}
	...

08001ef8 <LL_RCC_HSI_IsReady>:
{
 8001ef8:	b480      	push	{r7}
 8001efa:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RCC_CR_HSIRDY) ? 1UL : 0UL);
 8001efc:	4b07      	ldr	r3, [pc, #28]	; (8001f1c <LL_RCC_HSI_IsReady+0x24>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f04:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f08:	d101      	bne.n	8001f0e <LL_RCC_HSI_IsReady+0x16>
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e000      	b.n	8001f10 <LL_RCC_HSI_IsReady+0x18>
 8001f0e:	2300      	movs	r3, #0
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	40021000 	.word	0x40021000

08001f20 <LL_RCC_LSE_IsReady>:
{
 8001f20:	b480      	push	{r7}
 8001f22:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RCC_BDCR_LSERDY) ? 1UL : 0UL);
 8001f24:	4b07      	ldr	r3, [pc, #28]	; (8001f44 <LL_RCC_LSE_IsReady+0x24>)
 8001f26:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b02      	cmp	r3, #2
 8001f30:	d101      	bne.n	8001f36 <LL_RCC_LSE_IsReady+0x16>
 8001f32:	2301      	movs	r3, #1
 8001f34:	e000      	b.n	8001f38 <LL_RCC_LSE_IsReady+0x18>
 8001f36:	2300      	movs	r3, #0
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f40:	4770      	bx	lr
 8001f42:	bf00      	nop
 8001f44:	40021000 	.word	0x40021000

08001f48 <LL_RCC_MSI_IsEnabledRangeSelect>:
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  return ((READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RCC_CR_MSIRGSEL) ? 1UL : 0UL);
 8001f4c:	4b06      	ldr	r3, [pc, #24]	; (8001f68 <LL_RCC_MSI_IsEnabledRangeSelect+0x20>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0308 	and.w	r3, r3, #8
 8001f54:	2b08      	cmp	r3, #8
 8001f56:	d101      	bne.n	8001f5c <LL_RCC_MSI_IsEnabledRangeSelect+0x14>
 8001f58:	2301      	movs	r3, #1
 8001f5a:	e000      	b.n	8001f5e <LL_RCC_MSI_IsEnabledRangeSelect+0x16>
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	46bd      	mov	sp, r7
 8001f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f66:	4770      	bx	lr
 8001f68:	40021000 	.word	0x40021000

08001f6c <LL_RCC_MSI_GetRange>:
{
 8001f6c:	b480      	push	{r7}
 8001f6e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CR, RCC_CR_MSIRANGE));
 8001f70:	4b04      	ldr	r3, [pc, #16]	; (8001f84 <LL_RCC_MSI_GetRange+0x18>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001f78:	4618      	mov	r0, r3
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f80:	4770      	bx	lr
 8001f82:	bf00      	nop
 8001f84:	40021000 	.word	0x40021000

08001f88 <LL_RCC_MSI_GetRangeAfterStandby>:
{
 8001f88:	b480      	push	{r7}
 8001f8a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE));
 8001f8c:	4b04      	ldr	r3, [pc, #16]	; (8001fa0 <LL_RCC_MSI_GetRangeAfterStandby+0x18>)
 8001f8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001f92:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
}
 8001f96:	4618      	mov	r0, r3
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	40021000 	.word	0x40021000

08001fa4 <LL_RCC_GetSysClkSource>:
{
 8001fa4:	b480      	push	{r7}
 8001fa6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8001fa8:	4b04      	ldr	r3, [pc, #16]	; (8001fbc <LL_RCC_GetSysClkSource+0x18>)
 8001faa:	689b      	ldr	r3, [r3, #8]
 8001fac:	f003 030c 	and.w	r3, r3, #12
}
 8001fb0:	4618      	mov	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb8:	4770      	bx	lr
 8001fba:	bf00      	nop
 8001fbc:	40021000 	.word	0x40021000

08001fc0 <LL_RCC_GetAHBPrescaler>:
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8001fc4:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <LL_RCC_GetAHBPrescaler+0x18>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40021000 	.word	0x40021000

08001fdc <LL_RCC_GetAPB1Prescaler>:
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8001fe0:	4b04      	ldr	r3, [pc, #16]	; (8001ff4 <LL_RCC_GetAPB1Prescaler+0x18>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	46bd      	mov	sp, r7
 8001fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff0:	4770      	bx	lr
 8001ff2:	bf00      	nop
 8001ff4:	40021000 	.word	0x40021000

08001ff8 <LL_RCC_GetAPB2Prescaler>:
{
 8001ff8:	b480      	push	{r7}
 8001ffa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8001ffc:	4b04      	ldr	r3, [pc, #16]	; (8002010 <LL_RCC_GetAPB2Prescaler+0x18>)
 8001ffe:	689b      	ldr	r3, [r3, #8]
 8002000:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
}
 8002004:	4618      	mov	r0, r3
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40021000 	.word	0x40021000

08002014 <LL_RCC_GetUSARTClockSource>:
{
 8002014:	b480      	push	{r7}
 8002016:	b083      	sub	sp, #12
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, USARTx) | (USARTx << 16U));
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <LL_RCC_GetUSARTClockSource+0x24>)
 800201e:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	401a      	ands	r2, r3
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	041b      	lsls	r3, r3, #16
 800202a:	4313      	orrs	r3, r2
}
 800202c:	4618      	mov	r0, r3
 800202e:	370c      	adds	r7, #12
 8002030:	46bd      	mov	sp, r7
 8002032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002036:	4770      	bx	lr
 8002038:	40021000 	.word	0x40021000

0800203c <LL_RCC_GetUARTClockSource>:
{
 800203c:	b480      	push	{r7}
 800203e:	b083      	sub	sp, #12
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(RCC->CCIPR, UARTx) | (UARTx << 16U));
 8002044:	4b06      	ldr	r3, [pc, #24]	; (8002060 <LL_RCC_GetUARTClockSource+0x24>)
 8002046:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	401a      	ands	r2, r3
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	041b      	lsls	r3, r3, #16
 8002052:	4313      	orrs	r3, r2
}
 8002054:	4618      	mov	r0, r3
 8002056:	370c      	adds	r7, #12
 8002058:	46bd      	mov	sp, r7
 800205a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800205e:	4770      	bx	lr
 8002060:	40021000 	.word	0x40021000

08002064 <LL_RCC_PLL_GetMainSource>:
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8002068:	4b04      	ldr	r3, [pc, #16]	; (800207c <LL_RCC_PLL_GetMainSource+0x18>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0303 	and.w	r3, r3, #3
}
 8002070:	4618      	mov	r0, r3
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr
 800207a:	bf00      	nop
 800207c:	40021000 	.word	0x40021000

08002080 <LL_RCC_PLL_GetN>:
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8002084:	4b04      	ldr	r3, [pc, #16]	; (8002098 <LL_RCC_PLL_GetN+0x18>)
 8002086:	68db      	ldr	r3, [r3, #12]
 8002088:	0a1b      	lsrs	r3, r3, #8
 800208a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
}
 800208e:	4618      	mov	r0, r3
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	40021000 	.word	0x40021000

0800209c <LL_RCC_PLL_GetR>:
{
 800209c:	b480      	push	{r7}
 800209e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 80020a0:	4b04      	ldr	r3, [pc, #16]	; (80020b4 <LL_RCC_PLL_GetR+0x18>)
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
}
 80020a8:	4618      	mov	r0, r3
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <LL_RCC_PLL_GetDivider>:
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 80020bc:	4b04      	ldr	r3, [pc, #16]	; (80020d0 <LL_RCC_PLL_GetDivider+0x18>)
 80020be:	68db      	ldr	r3, [r3, #12]
 80020c0:	f003 0370 	and.w	r3, r3, #112	; 0x70
}
 80020c4:	4618      	mov	r0, r3
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	40021000 	.word	0x40021000

080020d4 <LL_RCC_GetUSARTClockFreq>:
  *         (*) value not defined in all devices.
  * @retval USART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUSARTClockFreq(uint32_t USARTxSource)
{
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b084      	sub	sp, #16
 80020d8:	af00      	add	r7, sp, #0
 80020da:	6078      	str	r0, [r7, #4]
  uint32_t usart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80020dc:	2300      	movs	r3, #0
 80020de:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_USART_CLKSOURCE(USARTxSource));

  if (USARTxSource == LL_RCC_USART1_CLKSOURCE)
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d137      	bne.n	8002156 <LL_RCC_GetUSARTClockFreq+0x82>
  {
    /* USART1CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	f7ff ff94 	bl	8002014 <LL_RCC_GetUSARTClockSource>
 80020ec:	4603      	mov	r3, r0
 80020ee:	f5a3 3340 	sub.w	r3, r3, #196608	; 0x30000
 80020f2:	2b03      	cmp	r3, #3
 80020f4:	f200 80b3 	bhi.w	800225e <LL_RCC_GetUSARTClockFreq+0x18a>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <LL_RCC_GetUSARTClockFreq+0x2c>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	0800213f 	.word	0x0800213f
 8002104:	08002111 	.word	0x08002111
 8002108:	08002119 	.word	0x08002119
 800210c:	0800212b 	.word	0x0800212b
    {
      case LL_RCC_USART1_CLKSOURCE_SYSCLK: /* USART1 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 8002110:	f000 f956 	bl	80023c0 <RCC_GetSystemClockFreq>
 8002114:	60f8      	str	r0, [r7, #12]
        break;
 8002116:	e0b3      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART1_CLKSOURCE_HSI:    /* USART1 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 8002118:	f7ff feee 	bl	8001ef8 <LL_RCC_HSI_IsReady>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	f000 809f 	beq.w	8002262 <LL_RCC_GetUSARTClockFreq+0x18e>
        {
          usart_frequency = HSI_VALUE;
 8002124:	4b59      	ldr	r3, [pc, #356]	; (800228c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002126:	60fb      	str	r3, [r7, #12]
        }
        break;
 8002128:	e09b      	b.n	8002262 <LL_RCC_GetUSARTClockFreq+0x18e>

      case LL_RCC_USART1_CLKSOURCE_LSE:    /* USART1 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800212a:	f7ff fef9 	bl	8001f20 <LL_RCC_LSE_IsReady>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	f000 8098 	beq.w	8002266 <LL_RCC_GetUSARTClockFreq+0x192>
        {
          usart_frequency = LSE_VALUE;
 8002136:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800213a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800213c:	e093      	b.n	8002266 <LL_RCC_GetUSARTClockFreq+0x192>

      case LL_RCC_USART1_CLKSOURCE_PCLK2:  /* USART1 Clock is PCLK2 */
        usart_frequency = RCC_GetPCLK2ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 800213e:	f000 f93f 	bl	80023c0 <RCC_GetSystemClockFreq>
 8002142:	4603      	mov	r3, r0
 8002144:	4618      	mov	r0, r3
 8002146:	f000 f9cb 	bl	80024e0 <RCC_GetHCLKClockFreq>
 800214a:	4603      	mov	r3, r0
 800214c:	4618      	mov	r0, r3
 800214e:	f000 f9f1 	bl	8002534 <RCC_GetPCLK2ClockFreq>
 8002152:	60f8      	str	r0, [r7, #12]
        break;
 8002154:	e094      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>

      default:
        break;
    }
  }
  else if (USARTxSource == LL_RCC_USART2_CLKSOURCE)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	2b0c      	cmp	r3, #12
 800215a:	d146      	bne.n	80021ea <LL_RCC_GetUSARTClockFreq+0x116>
  {
    /* USART2CLK clock frequency */
    switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 800215c:	6878      	ldr	r0, [r7, #4]
 800215e:	f7ff ff59 	bl	8002014 <LL_RCC_GetUSARTClockSource>
 8002162:	4603      	mov	r3, r0
 8002164:	f5a3 2340 	sub.w	r3, r3, #786432	; 0xc0000
 8002168:	2b0c      	cmp	r3, #12
 800216a:	d87e      	bhi.n	800226a <LL_RCC_GetUSARTClockFreq+0x196>
 800216c:	a201      	add	r2, pc, #4	; (adr r2, 8002174 <LL_RCC_GetUSARTClockFreq+0xa0>)
 800216e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002172:	bf00      	nop
 8002174:	080021d3 	.word	0x080021d3
 8002178:	0800226b 	.word	0x0800226b
 800217c:	0800226b 	.word	0x0800226b
 8002180:	0800226b 	.word	0x0800226b
 8002184:	080021a9 	.word	0x080021a9
 8002188:	0800226b 	.word	0x0800226b
 800218c:	0800226b 	.word	0x0800226b
 8002190:	0800226b 	.word	0x0800226b
 8002194:	080021b1 	.word	0x080021b1
 8002198:	0800226b 	.word	0x0800226b
 800219c:	0800226b 	.word	0x0800226b
 80021a0:	0800226b 	.word	0x0800226b
 80021a4:	080021c1 	.word	0x080021c1
    {
      case LL_RCC_USART2_CLKSOURCE_SYSCLK: /* USART2 Clock is System Clock */
        usart_frequency = RCC_GetSystemClockFreq();
 80021a8:	f000 f90a 	bl	80023c0 <RCC_GetSystemClockFreq>
 80021ac:	60f8      	str	r0, [r7, #12]
        break;
 80021ae:	e067      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>

      case LL_RCC_USART2_CLKSOURCE_HSI:    /* USART2 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80021b0:	f7ff fea2 	bl	8001ef8 <LL_RCC_HSI_IsReady>
 80021b4:	4603      	mov	r3, r0
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d059      	beq.n	800226e <LL_RCC_GetUSARTClockFreq+0x19a>
        {
          usart_frequency = HSI_VALUE;
 80021ba:	4b34      	ldr	r3, [pc, #208]	; (800228c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 80021bc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021be:	e056      	b.n	800226e <LL_RCC_GetUSARTClockFreq+0x19a>

      case LL_RCC_USART2_CLKSOURCE_LSE:    /* USART2 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80021c0:	f7ff feae 	bl	8001f20 <LL_RCC_LSE_IsReady>
 80021c4:	4603      	mov	r3, r0
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d053      	beq.n	8002272 <LL_RCC_GetUSARTClockFreq+0x19e>
        {
          usart_frequency = LSE_VALUE;
 80021ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80021ce:	60fb      	str	r3, [r7, #12]
        }
        break;
 80021d0:	e04f      	b.n	8002272 <LL_RCC_GetUSARTClockFreq+0x19e>

      case LL_RCC_USART2_CLKSOURCE_PCLK1:  /* USART2 Clock is PCLK1 */
        usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 80021d2:	f000 f8f5 	bl	80023c0 <RCC_GetSystemClockFreq>
 80021d6:	4603      	mov	r3, r0
 80021d8:	4618      	mov	r0, r3
 80021da:	f000 f981 	bl	80024e0 <RCC_GetHCLKClockFreq>
 80021de:	4603      	mov	r3, r0
 80021e0:	4618      	mov	r0, r3
 80021e2:	f000 f993 	bl	800250c <RCC_GetPCLK1ClockFreq>
 80021e6:	60f8      	str	r0, [r7, #12]
        break;
 80021e8:	e04a      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
    }
  }
  else
  {
#if defined(RCC_CCIPR_USART3SEL)
    if (USARTxSource == LL_RCC_USART3_CLKSOURCE)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2b30      	cmp	r3, #48	; 0x30
 80021ee:	d147      	bne.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
    {
      /* USART3CLK clock frequency */
      switch (LL_RCC_GetUSARTClockSource(USARTxSource))
 80021f0:	6878      	ldr	r0, [r7, #4]
 80021f2:	f7ff ff0f 	bl	8002014 <LL_RCC_GetUSARTClockSource>
 80021f6:	4603      	mov	r3, r0
 80021f8:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 80021fc:	d01a      	beq.n	8002234 <LL_RCC_GetUSARTClockFreq+0x160>
 80021fe:	f1b3 1f30 	cmp.w	r3, #3145776	; 0x300030
 8002202:	d838      	bhi.n	8002276 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002204:	4a22      	ldr	r2, [pc, #136]	; (8002290 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 8002206:	4293      	cmp	r3, r2
 8002208:	d00c      	beq.n	8002224 <LL_RCC_GetUSARTClockFreq+0x150>
 800220a:	4a21      	ldr	r2, [pc, #132]	; (8002290 <LL_RCC_GetUSARTClockFreq+0x1bc>)
 800220c:	4293      	cmp	r3, r2
 800220e:	d832      	bhi.n	8002276 <LL_RCC_GetUSARTClockFreq+0x1a2>
 8002210:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8002214:	d017      	beq.n	8002246 <LL_RCC_GetUSARTClockFreq+0x172>
 8002216:	4a1f      	ldr	r2, [pc, #124]	; (8002294 <LL_RCC_GetUSARTClockFreq+0x1c0>)
 8002218:	4293      	cmp	r3, r2
 800221a:	d12c      	bne.n	8002276 <LL_RCC_GetUSARTClockFreq+0x1a2>
      {
        case LL_RCC_USART3_CLKSOURCE_SYSCLK: /* USART3 Clock is System Clock */
          usart_frequency = RCC_GetSystemClockFreq();
 800221c:	f000 f8d0 	bl	80023c0 <RCC_GetSystemClockFreq>
 8002220:	60f8      	str	r0, [r7, #12]
          break;
 8002222:	e02d      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>

        case LL_RCC_USART3_CLKSOURCE_HSI:    /* USART3 Clock is HSI Osc. */
          if (LL_RCC_HSI_IsReady() != 0U)
 8002224:	f7ff fe68 	bl	8001ef8 <LL_RCC_HSI_IsReady>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d025      	beq.n	800227a <LL_RCC_GetUSARTClockFreq+0x1a6>
          {
            usart_frequency = HSI_VALUE;
 800222e:	4b17      	ldr	r3, [pc, #92]	; (800228c <LL_RCC_GetUSARTClockFreq+0x1b8>)
 8002230:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002232:	e022      	b.n	800227a <LL_RCC_GetUSARTClockFreq+0x1a6>

        case LL_RCC_USART3_CLKSOURCE_LSE:    /* USART3 Clock is LSE Osc. */
          if (LL_RCC_LSE_IsReady() != 0U)
 8002234:	f7ff fe74 	bl	8001f20 <LL_RCC_LSE_IsReady>
 8002238:	4603      	mov	r3, r0
 800223a:	2b00      	cmp	r3, #0
 800223c:	d01f      	beq.n	800227e <LL_RCC_GetUSARTClockFreq+0x1aa>
          {
            usart_frequency = LSE_VALUE;
 800223e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002242:	60fb      	str	r3, [r7, #12]
          }
          break;
 8002244:	e01b      	b.n	800227e <LL_RCC_GetUSARTClockFreq+0x1aa>

        case LL_RCC_USART3_CLKSOURCE_PCLK1:  /* USART3 Clock is PCLK1 */
          usart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002246:	f000 f8bb 	bl	80023c0 <RCC_GetSystemClockFreq>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f000 f947 	bl	80024e0 <RCC_GetHCLKClockFreq>
 8002252:	4603      	mov	r3, r0
 8002254:	4618      	mov	r0, r3
 8002256:	f000 f959 	bl	800250c <RCC_GetPCLK1ClockFreq>
 800225a:	60f8      	str	r0, [r7, #12]
          break;
 800225c:	e010      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800225e:	bf00      	nop
 8002260:	e00e      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002262:	bf00      	nop
 8002264:	e00c      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002266:	bf00      	nop
 8002268:	e00a      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800226a:	bf00      	nop
 800226c:	e008      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 800226e:	bf00      	nop
 8002270:	e006      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
        break;
 8002272:	bf00      	nop
 8002274:	e004      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>

        default:
          break;
 8002276:	bf00      	nop
 8002278:	e002      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800227a:	bf00      	nop
 800227c:	e000      	b.n	8002280 <LL_RCC_GetUSARTClockFreq+0x1ac>
          break;
 800227e:	bf00      	nop
      }
    }
#endif /* RCC_CCIPR_USART3SEL */
  }
  return usart_frequency;
 8002280:	68fb      	ldr	r3, [r7, #12]
}
 8002282:	4618      	mov	r0, r3
 8002284:	3710      	adds	r7, #16
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	00f42400 	.word	0x00f42400
 8002290:	00300020 	.word	0x00300020
 8002294:	00300010 	.word	0x00300010

08002298 <LL_RCC_GetUARTClockFreq>:
  *         @arg @ref LL_RCC_UART5_CLKSOURCE
  * @retval UART clock frequency (in Hz)
  *         - @ref  LL_RCC_PERIPH_FREQUENCY_NO indicates that oscillator (HSI or LSE) is not ready
  */
uint32_t LL_RCC_GetUARTClockFreq(uint32_t UARTxSource)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  uint32_t uart_frequency = LL_RCC_PERIPH_FREQUENCY_NO;
 80022a0:	2300      	movs	r3, #0
 80022a2:	60fb      	str	r3, [r7, #12]

  /* Check parameter */
  assert_param(IS_LL_RCC_UART_CLKSOURCE(UARTxSource));

#if defined(RCC_CCIPR_UART4SEL)
  if (UARTxSource == LL_RCC_UART4_CLKSOURCE)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	2bc0      	cmp	r3, #192	; 0xc0
 80022a8:	d13b      	bne.n	8002322 <LL_RCC_GetUARTClockFreq+0x8a>
  {
    /* UART4CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7ff fec6 	bl	800203c <LL_RCC_GetUARTClockSource>
 80022b0:	4603      	mov	r3, r0
 80022b2:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80022b6:	d01a      	beq.n	80022ee <LL_RCC_GetUARTClockFreq+0x56>
 80022b8:	f1b3 1fc0 	cmp.w	r3, #12583104	; 0xc000c0
 80022bc:	d82c      	bhi.n	8002318 <LL_RCC_GetUARTClockFreq+0x80>
 80022be:	4a3b      	ldr	r2, [pc, #236]	; (80023ac <LL_RCC_GetUARTClockFreq+0x114>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d00c      	beq.n	80022de <LL_RCC_GetUARTClockFreq+0x46>
 80022c4:	4a39      	ldr	r2, [pc, #228]	; (80023ac <LL_RCC_GetUARTClockFreq+0x114>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d826      	bhi.n	8002318 <LL_RCC_GetUARTClockFreq+0x80>
 80022ca:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022ce:	d017      	beq.n	8002300 <LL_RCC_GetUARTClockFreq+0x68>
 80022d0:	4a37      	ldr	r2, [pc, #220]	; (80023b0 <LL_RCC_GetUARTClockFreq+0x118>)
 80022d2:	4293      	cmp	r3, r2
 80022d4:	d120      	bne.n	8002318 <LL_RCC_GetUARTClockFreq+0x80>
    {
      case LL_RCC_UART4_CLKSOURCE_SYSCLK: /* UART4 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 80022d6:	f000 f873 	bl	80023c0 <RCC_GetSystemClockFreq>
 80022da:	60f8      	str	r0, [r7, #12]
        break;
 80022dc:	e021      	b.n	8002322 <LL_RCC_GetUARTClockFreq+0x8a>

      case LL_RCC_UART4_CLKSOURCE_HSI:    /* UART4 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 80022de:	f7ff fe0b 	bl	8001ef8 <LL_RCC_HSI_IsReady>
 80022e2:	4603      	mov	r3, r0
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d019      	beq.n	800231c <LL_RCC_GetUARTClockFreq+0x84>
        {
          uart_frequency = HSI_VALUE;
 80022e8:	4b32      	ldr	r3, [pc, #200]	; (80023b4 <LL_RCC_GetUARTClockFreq+0x11c>)
 80022ea:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022ec:	e016      	b.n	800231c <LL_RCC_GetUARTClockFreq+0x84>

      case LL_RCC_UART4_CLKSOURCE_LSE:    /* UART4 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 80022ee:	f7ff fe17 	bl	8001f20 <LL_RCC_LSE_IsReady>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d013      	beq.n	8002320 <LL_RCC_GetUARTClockFreq+0x88>
        {
          uart_frequency = LSE_VALUE;
 80022f8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80022fc:	60fb      	str	r3, [r7, #12]
        }
        break;
 80022fe:	e00f      	b.n	8002320 <LL_RCC_GetUARTClockFreq+0x88>

      case LL_RCC_UART4_CLKSOURCE_PCLK1:  /* UART4 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002300:	f000 f85e 	bl	80023c0 <RCC_GetSystemClockFreq>
 8002304:	4603      	mov	r3, r0
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f8ea 	bl	80024e0 <RCC_GetHCLKClockFreq>
 800230c:	4603      	mov	r3, r0
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f8fc 	bl	800250c <RCC_GetPCLK1ClockFreq>
 8002314:	60f8      	str	r0, [r7, #12]
        break;
 8002316:	e004      	b.n	8002322 <LL_RCC_GetUARTClockFreq+0x8a>

      default:
        break;
 8002318:	bf00      	nop
 800231a:	e002      	b.n	8002322 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 800231c:	bf00      	nop
 800231e:	e000      	b.n	8002322 <LL_RCC_GetUARTClockFreq+0x8a>
        break;
 8002320:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART4SEL */

#if defined(RCC_CCIPR_UART5SEL)
  if (UARTxSource == LL_RCC_UART5_CLKSOURCE)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002328:	d13b      	bne.n	80023a2 <LL_RCC_GetUARTClockFreq+0x10a>
  {
    /* UART5CLK clock frequency */
    switch (LL_RCC_GetUARTClockSource(UARTxSource))
 800232a:	6878      	ldr	r0, [r7, #4]
 800232c:	f7ff fe86 	bl	800203c <LL_RCC_GetUARTClockSource>
 8002330:	4603      	mov	r3, r0
 8002332:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 8002336:	d01a      	beq.n	800236e <LL_RCC_GetUARTClockFreq+0xd6>
 8002338:	f1b3 2f03 	cmp.w	r3, #50332416	; 0x3000300
 800233c:	d82c      	bhi.n	8002398 <LL_RCC_GetUARTClockFreq+0x100>
 800233e:	4a1e      	ldr	r2, [pc, #120]	; (80023b8 <LL_RCC_GetUARTClockFreq+0x120>)
 8002340:	4293      	cmp	r3, r2
 8002342:	d00c      	beq.n	800235e <LL_RCC_GetUARTClockFreq+0xc6>
 8002344:	4a1c      	ldr	r2, [pc, #112]	; (80023b8 <LL_RCC_GetUARTClockFreq+0x120>)
 8002346:	4293      	cmp	r3, r2
 8002348:	d826      	bhi.n	8002398 <LL_RCC_GetUARTClockFreq+0x100>
 800234a:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800234e:	d017      	beq.n	8002380 <LL_RCC_GetUARTClockFreq+0xe8>
 8002350:	4a1a      	ldr	r2, [pc, #104]	; (80023bc <LL_RCC_GetUARTClockFreq+0x124>)
 8002352:	4293      	cmp	r3, r2
 8002354:	d120      	bne.n	8002398 <LL_RCC_GetUARTClockFreq+0x100>
    {
      case LL_RCC_UART5_CLKSOURCE_SYSCLK: /* UART5 Clock is System Clock */
        uart_frequency = RCC_GetSystemClockFreq();
 8002356:	f000 f833 	bl	80023c0 <RCC_GetSystemClockFreq>
 800235a:	60f8      	str	r0, [r7, #12]
        break;
 800235c:	e021      	b.n	80023a2 <LL_RCC_GetUARTClockFreq+0x10a>

      case LL_RCC_UART5_CLKSOURCE_HSI:    /* UART5 Clock is HSI Osc. */
        if (LL_RCC_HSI_IsReady() != 0U)
 800235e:	f7ff fdcb 	bl	8001ef8 <LL_RCC_HSI_IsReady>
 8002362:	4603      	mov	r3, r0
 8002364:	2b00      	cmp	r3, #0
 8002366:	d019      	beq.n	800239c <LL_RCC_GetUARTClockFreq+0x104>
        {
          uart_frequency = HSI_VALUE;
 8002368:	4b12      	ldr	r3, [pc, #72]	; (80023b4 <LL_RCC_GetUARTClockFreq+0x11c>)
 800236a:	60fb      	str	r3, [r7, #12]
        }
        break;
 800236c:	e016      	b.n	800239c <LL_RCC_GetUARTClockFreq+0x104>

      case LL_RCC_UART5_CLKSOURCE_LSE:    /* UART5 Clock is LSE Osc. */
        if (LL_RCC_LSE_IsReady() != 0U)
 800236e:	f7ff fdd7 	bl	8001f20 <LL_RCC_LSE_IsReady>
 8002372:	4603      	mov	r3, r0
 8002374:	2b00      	cmp	r3, #0
 8002376:	d013      	beq.n	80023a0 <LL_RCC_GetUARTClockFreq+0x108>
        {
          uart_frequency = LSE_VALUE;
 8002378:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800237c:	60fb      	str	r3, [r7, #12]
        }
        break;
 800237e:	e00f      	b.n	80023a0 <LL_RCC_GetUARTClockFreq+0x108>

      case LL_RCC_UART5_CLKSOURCE_PCLK1:  /* UART5 Clock is PCLK1 */
        uart_frequency = RCC_GetPCLK1ClockFreq(RCC_GetHCLKClockFreq(RCC_GetSystemClockFreq()));
 8002380:	f000 f81e 	bl	80023c0 <RCC_GetSystemClockFreq>
 8002384:	4603      	mov	r3, r0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 f8aa 	bl	80024e0 <RCC_GetHCLKClockFreq>
 800238c:	4603      	mov	r3, r0
 800238e:	4618      	mov	r0, r3
 8002390:	f000 f8bc 	bl	800250c <RCC_GetPCLK1ClockFreq>
 8002394:	60f8      	str	r0, [r7, #12]
        break;
 8002396:	e004      	b.n	80023a2 <LL_RCC_GetUARTClockFreq+0x10a>

      default:
        break;
 8002398:	bf00      	nop
 800239a:	e002      	b.n	80023a2 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 800239c:	bf00      	nop
 800239e:	e000      	b.n	80023a2 <LL_RCC_GetUARTClockFreq+0x10a>
        break;
 80023a0:	bf00      	nop
    }
  }
#endif /* RCC_CCIPR_UART5SEL */

  return uart_frequency;
 80023a2:	68fb      	ldr	r3, [r7, #12]
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3710      	adds	r7, #16
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}
 80023ac:	00c00080 	.word	0x00c00080
 80023b0:	00c00040 	.word	0x00c00040
 80023b4:	00f42400 	.word	0x00f42400
 80023b8:	03000200 	.word	0x03000200
 80023bc:	03000100 	.word	0x03000100

080023c0 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
static uint32_t RCC_GetSystemClockFreq(void)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b082      	sub	sp, #8
 80023c4:	af00      	add	r7, sp, #0
  uint32_t frequency;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80023c6:	f7ff fded 	bl	8001fa4 <LL_RCC_GetSysClkSource>
 80023ca:	4603      	mov	r3, r0
 80023cc:	2b0c      	cmp	r3, #12
 80023ce:	d851      	bhi.n	8002474 <RCC_GetSystemClockFreq+0xb4>
 80023d0:	a201      	add	r2, pc, #4	; (adr r2, 80023d8 <RCC_GetSystemClockFreq+0x18>)
 80023d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023d6:	bf00      	nop
 80023d8:	0800240d 	.word	0x0800240d
 80023dc:	08002475 	.word	0x08002475
 80023e0:	08002475 	.word	0x08002475
 80023e4:	08002475 	.word	0x08002475
 80023e8:	08002461 	.word	0x08002461
 80023ec:	08002475 	.word	0x08002475
 80023f0:	08002475 	.word	0x08002475
 80023f4:	08002475 	.word	0x08002475
 80023f8:	08002467 	.word	0x08002467
 80023fc:	08002475 	.word	0x08002475
 8002400:	08002475 	.word	0x08002475
 8002404:	08002475 	.word	0x08002475
 8002408:	0800246d 	.word	0x0800246d
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 800240c:	f7ff fd9c 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002410:	4603      	mov	r3, r0
 8002412:	2b00      	cmp	r3, #0
 8002414:	d111      	bne.n	800243a <RCC_GetSystemClockFreq+0x7a>
 8002416:	f7ff fd97 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d004      	beq.n	800242a <RCC_GetSystemClockFreq+0x6a>
 8002420:	f7ff fda4 	bl	8001f6c <LL_RCC_MSI_GetRange>
 8002424:	4603      	mov	r3, r0
 8002426:	0a1b      	lsrs	r3, r3, #8
 8002428:	e003      	b.n	8002432 <RCC_GetSystemClockFreq+0x72>
 800242a:	f7ff fdad 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 800242e:	4603      	mov	r3, r0
 8002430:	0a1b      	lsrs	r3, r3, #8
 8002432:	4a28      	ldr	r2, [pc, #160]	; (80024d4 <RCC_GetSystemClockFreq+0x114>)
 8002434:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002438:	e010      	b.n	800245c <RCC_GetSystemClockFreq+0x9c>
 800243a:	f7ff fd85 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 800243e:	4603      	mov	r3, r0
 8002440:	2b00      	cmp	r3, #0
 8002442:	d004      	beq.n	800244e <RCC_GetSystemClockFreq+0x8e>
 8002444:	f7ff fd92 	bl	8001f6c <LL_RCC_MSI_GetRange>
 8002448:	4603      	mov	r3, r0
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	e003      	b.n	8002456 <RCC_GetSystemClockFreq+0x96>
 800244e:	f7ff fd9b 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002452:	4603      	mov	r3, r0
 8002454:	091b      	lsrs	r3, r3, #4
 8002456:	4a1f      	ldr	r2, [pc, #124]	; (80024d4 <RCC_GetSystemClockFreq+0x114>)
 8002458:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245c:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 800245e:	e033      	b.n	80024c8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8002460:	4b1d      	ldr	r3, [pc, #116]	; (80024d8 <RCC_GetSystemClockFreq+0x118>)
 8002462:	607b      	str	r3, [r7, #4]
      break;
 8002464:	e030      	b.n	80024c8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 8002466:	4b1d      	ldr	r3, [pc, #116]	; (80024dc <RCC_GetSystemClockFreq+0x11c>)
 8002468:	607b      	str	r3, [r7, #4]
      break;
 800246a:	e02d      	b.n	80024c8 <RCC_GetSystemClockFreq+0x108>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS();
 800246c:	f000 f876 	bl	800255c <RCC_PLL_GetFreqDomain_SYS>
 8002470:	6078      	str	r0, [r7, #4]
      break;
 8002472:	e029      	b.n	80024c8 <RCC_GetSystemClockFreq+0x108>

    default:
      frequency = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002474:	f7ff fd68 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002478:	4603      	mov	r3, r0
 800247a:	2b00      	cmp	r3, #0
 800247c:	d111      	bne.n	80024a2 <RCC_GetSystemClockFreq+0xe2>
 800247e:	f7ff fd63 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002482:	4603      	mov	r3, r0
 8002484:	2b00      	cmp	r3, #0
 8002486:	d004      	beq.n	8002492 <RCC_GetSystemClockFreq+0xd2>
 8002488:	f7ff fd70 	bl	8001f6c <LL_RCC_MSI_GetRange>
 800248c:	4603      	mov	r3, r0
 800248e:	0a1b      	lsrs	r3, r3, #8
 8002490:	e003      	b.n	800249a <RCC_GetSystemClockFreq+0xda>
 8002492:	f7ff fd79 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002496:	4603      	mov	r3, r0
 8002498:	0a1b      	lsrs	r3, r3, #8
 800249a:	4a0e      	ldr	r2, [pc, #56]	; (80024d4 <RCC_GetSystemClockFreq+0x114>)
 800249c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024a0:	e010      	b.n	80024c4 <RCC_GetSystemClockFreq+0x104>
 80024a2:	f7ff fd51 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d004      	beq.n	80024b6 <RCC_GetSystemClockFreq+0xf6>
 80024ac:	f7ff fd5e 	bl	8001f6c <LL_RCC_MSI_GetRange>
 80024b0:	4603      	mov	r3, r0
 80024b2:	091b      	lsrs	r3, r3, #4
 80024b4:	e003      	b.n	80024be <RCC_GetSystemClockFreq+0xfe>
 80024b6:	f7ff fd67 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 80024ba:	4603      	mov	r3, r0
 80024bc:	091b      	lsrs	r3, r3, #4
 80024be:	4a05      	ldr	r2, [pc, #20]	; (80024d4 <RCC_GetSystemClockFreq+0x114>)
 80024c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024c4:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80024c6:	bf00      	nop
  }

  return frequency;
 80024c8:	687b      	ldr	r3, [r7, #4]
}
 80024ca:	4618      	mov	r0, r3
 80024cc:	3708      	adds	r7, #8
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	08002aa4 	.word	0x08002aa4
 80024d8:	00f42400 	.word	0x00f42400
 80024dc:	007a1200 	.word	0x007a1200

080024e0 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
static uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b082      	sub	sp, #8
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 80024e8:	f7ff fd6a 	bl	8001fc0 <LL_RCC_GetAHBPrescaler>
 80024ec:	4603      	mov	r3, r0
 80024ee:	091b      	lsrs	r3, r3, #4
 80024f0:	f003 030f 	and.w	r3, r3, #15
 80024f4:	4a04      	ldr	r2, [pc, #16]	; (8002508 <RCC_GetHCLKClockFreq+0x28>)
 80024f6:	5cd3      	ldrb	r3, [r2, r3]
 80024f8:	461a      	mov	r2, r3
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	40d3      	lsrs	r3, r2
}
 80024fe:	4618      	mov	r0, r3
 8002500:	3708      	adds	r7, #8
 8002502:	46bd      	mov	sp, r7
 8002504:	bd80      	pop	{r7, pc}
 8002506:	bf00      	nop
 8002508:	08002a8c 	.word	0x08002a8c

0800250c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b082      	sub	sp, #8
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 8002514:	f7ff fd62 	bl	8001fdc <LL_RCC_GetAPB1Prescaler>
 8002518:	4603      	mov	r3, r0
 800251a:	0a1b      	lsrs	r3, r3, #8
 800251c:	4a04      	ldr	r2, [pc, #16]	; (8002530 <RCC_GetPCLK1ClockFreq+0x24>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	461a      	mov	r2, r3
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	40d3      	lsrs	r3, r2
}
 8002526:	4618      	mov	r0, r3
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	08002a9c 	.word	0x08002a9c

08002534 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
static uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 8002534:	b580      	push	{r7, lr}
 8002536:	b082      	sub	sp, #8
 8002538:	af00      	add	r7, sp, #0
 800253a:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 800253c:	f7ff fd5c 	bl	8001ff8 <LL_RCC_GetAPB2Prescaler>
 8002540:	4603      	mov	r3, r0
 8002542:	0adb      	lsrs	r3, r3, #11
 8002544:	4a04      	ldr	r2, [pc, #16]	; (8002558 <RCC_GetPCLK2ClockFreq+0x24>)
 8002546:	5cd3      	ldrb	r3, [r2, r3]
 8002548:	461a      	mov	r2, r3
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	40d3      	lsrs	r3, r2
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	08002a9c 	.word	0x08002a9c

0800255c <RCC_PLL_GetFreqDomain_SYS>:
/**
  * @brief  Return PLL clock frequency used for system domain
  * @retval PLL clock frequency (in Hz)
  */
static uint32_t RCC_PLL_GetFreqDomain_SYS(void)
{
 800255c:	b590      	push	{r4, r7, lr}
 800255e:	b083      	sub	sp, #12
 8002560:	af00      	add	r7, sp, #0
  uint32_t pllinputfreq, pllsource;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8002562:	f7ff fd7f 	bl	8002064 <LL_RCC_PLL_GetMainSource>
 8002566:	6038      	str	r0, [r7, #0]

  switch (pllsource)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	2b03      	cmp	r3, #3
 800256c:	d036      	beq.n	80025dc <RCC_PLL_GetFreqDomain_SYS+0x80>
 800256e:	683b      	ldr	r3, [r7, #0]
 8002570:	2b03      	cmp	r3, #3
 8002572:	d836      	bhi.n	80025e2 <RCC_PLL_GetFreqDomain_SYS+0x86>
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	2b01      	cmp	r3, #1
 8002578:	d003      	beq.n	8002582 <RCC_PLL_GetFreqDomain_SYS+0x26>
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	2b02      	cmp	r3, #2
 800257e:	d02a      	beq.n	80025d6 <RCC_PLL_GetFreqDomain_SYS+0x7a>
 8002580:	e02f      	b.n	80025e2 <RCC_PLL_GetFreqDomain_SYS+0x86>
  {
    case LL_RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 8002582:	f7ff fce1 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d111      	bne.n	80025b0 <RCC_PLL_GetFreqDomain_SYS+0x54>
 800258c:	f7ff fcdc 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002590:	4603      	mov	r3, r0
 8002592:	2b00      	cmp	r3, #0
 8002594:	d004      	beq.n	80025a0 <RCC_PLL_GetFreqDomain_SYS+0x44>
 8002596:	f7ff fce9 	bl	8001f6c <LL_RCC_MSI_GetRange>
 800259a:	4603      	mov	r3, r0
 800259c:	0a1b      	lsrs	r3, r3, #8
 800259e:	e003      	b.n	80025a8 <RCC_PLL_GetFreqDomain_SYS+0x4c>
 80025a0:	f7ff fcf2 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 80025a4:	4603      	mov	r3, r0
 80025a6:	0a1b      	lsrs	r3, r3, #8
 80025a8:	4a2f      	ldr	r2, [pc, #188]	; (8002668 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80025aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025ae:	e010      	b.n	80025d2 <RCC_PLL_GetFreqDomain_SYS+0x76>
 80025b0:	f7ff fcca 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d004      	beq.n	80025c4 <RCC_PLL_GetFreqDomain_SYS+0x68>
 80025ba:	f7ff fcd7 	bl	8001f6c <LL_RCC_MSI_GetRange>
 80025be:	4603      	mov	r3, r0
 80025c0:	091b      	lsrs	r3, r3, #4
 80025c2:	e003      	b.n	80025cc <RCC_PLL_GetFreqDomain_SYS+0x70>
 80025c4:	f7ff fce0 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 80025c8:	4603      	mov	r3, r0
 80025ca:	091b      	lsrs	r3, r3, #4
 80025cc:	4a26      	ldr	r2, [pc, #152]	; (8002668 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 80025ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80025d2:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 80025d4:	e02f      	b.n	8002636 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 80025d6:	4b25      	ldr	r3, [pc, #148]	; (800266c <RCC_PLL_GetFreqDomain_SYS+0x110>)
 80025d8:	607b      	str	r3, [r7, #4]
      break;
 80025da:	e02c      	b.n	8002636 <RCC_PLL_GetFreqDomain_SYS+0xda>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 80025dc:	4b24      	ldr	r3, [pc, #144]	; (8002670 <RCC_PLL_GetFreqDomain_SYS+0x114>)
 80025de:	607b      	str	r3, [r7, #4]
      break;
 80025e0:	e029      	b.n	8002636 <RCC_PLL_GetFreqDomain_SYS+0xda>

    default:
      pllinputfreq = __LL_RCC_CALC_MSI_FREQ(LL_RCC_MSI_IsEnabledRangeSelect(),
 80025e2:	f7ff fcb1 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025e6:	4603      	mov	r3, r0
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d111      	bne.n	8002610 <RCC_PLL_GetFreqDomain_SYS+0xb4>
 80025ec:	f7ff fcac 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 80025f0:	4603      	mov	r3, r0
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d004      	beq.n	8002600 <RCC_PLL_GetFreqDomain_SYS+0xa4>
 80025f6:	f7ff fcb9 	bl	8001f6c <LL_RCC_MSI_GetRange>
 80025fa:	4603      	mov	r3, r0
 80025fc:	0a1b      	lsrs	r3, r3, #8
 80025fe:	e003      	b.n	8002608 <RCC_PLL_GetFreqDomain_SYS+0xac>
 8002600:	f7ff fcc2 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002604:	4603      	mov	r3, r0
 8002606:	0a1b      	lsrs	r3, r3, #8
 8002608:	4a17      	ldr	r2, [pc, #92]	; (8002668 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800260a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800260e:	e010      	b.n	8002632 <RCC_PLL_GetFreqDomain_SYS+0xd6>
 8002610:	f7ff fc9a 	bl	8001f48 <LL_RCC_MSI_IsEnabledRangeSelect>
 8002614:	4603      	mov	r3, r0
 8002616:	2b00      	cmp	r3, #0
 8002618:	d004      	beq.n	8002624 <RCC_PLL_GetFreqDomain_SYS+0xc8>
 800261a:	f7ff fca7 	bl	8001f6c <LL_RCC_MSI_GetRange>
 800261e:	4603      	mov	r3, r0
 8002620:	091b      	lsrs	r3, r3, #4
 8002622:	e003      	b.n	800262c <RCC_PLL_GetFreqDomain_SYS+0xd0>
 8002624:	f7ff fcb0 	bl	8001f88 <LL_RCC_MSI_GetRangeAfterStandby>
 8002628:	4603      	mov	r3, r0
 800262a:	091b      	lsrs	r3, r3, #4
 800262c:	4a0e      	ldr	r2, [pc, #56]	; (8002668 <RCC_PLL_GetFreqDomain_SYS+0x10c>)
 800262e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002632:	607b      	str	r3, [r7, #4]
                                    ((LL_RCC_MSI_IsEnabledRangeSelect() != 0U) ?
                                     LL_RCC_MSI_GetRange() :
                                     LL_RCC_MSI_GetRangeAfterStandby()));
      break;
 8002634:	bf00      	nop
  }
  return __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8002636:	f7ff fd3f 	bl	80020b8 <LL_RCC_PLL_GetDivider>
 800263a:	4603      	mov	r3, r0
 800263c:	091b      	lsrs	r3, r3, #4
 800263e:	3301      	adds	r3, #1
 8002640:	687a      	ldr	r2, [r7, #4]
 8002642:	fbb2 f4f3 	udiv	r4, r2, r3
 8002646:	f7ff fd1b 	bl	8002080 <LL_RCC_PLL_GetN>
 800264a:	4603      	mov	r3, r0
 800264c:	fb03 f404 	mul.w	r4, r3, r4
 8002650:	f7ff fd24 	bl	800209c <LL_RCC_PLL_GetR>
 8002654:	4603      	mov	r3, r0
 8002656:	0e5b      	lsrs	r3, r3, #25
 8002658:	3301      	adds	r3, #1
 800265a:	005b      	lsls	r3, r3, #1
 800265c:	fbb4 f3f3 	udiv	r3, r4, r3
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
}
 8002660:	4618      	mov	r0, r3
 8002662:	370c      	adds	r7, #12
 8002664:	46bd      	mov	sp, r7
 8002666:	bd90      	pop	{r4, r7, pc}
 8002668:	08002aa4 	.word	0x08002aa4
 800266c:	00f42400 	.word	0x00f42400
 8002670:	007a1200 	.word	0x007a1200

08002674 <LL_SPI_IsEnabled>:
{
 8002674:	b480      	push	{r7}
 8002676:	b083      	sub	sp, #12
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(SPIx->CR1, SPI_CR1_SPE) == (SPI_CR1_SPE)) ? 1UL : 0UL);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d101      	bne.n	800268c <LL_SPI_IsEnabled+0x18>
 8002688:	2301      	movs	r3, #1
 800268a:	e000      	b.n	800268e <LL_SPI_IsEnabled+0x1a>
 800268c:	2300      	movs	r3, #0
}
 800268e:	4618      	mov	r0, r3
 8002690:	370c      	adds	r7, #12
 8002692:	46bd      	mov	sp, r7
 8002694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002698:	4770      	bx	lr

0800269a <LL_SPI_SetRxFIFOThreshold>:
{
 800269a:	b480      	push	{r7}
 800269c:	b083      	sub	sp, #12
 800269e:	af00      	add	r7, sp, #0
 80026a0:	6078      	str	r0, [r7, #4]
 80026a2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(SPIx->CR2, SPI_CR2_FRXTH, Threshold);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	685b      	ldr	r3, [r3, #4]
 80026a8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80026ac:	683b      	ldr	r3, [r7, #0]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	605a      	str	r2, [r3, #4]
}
 80026b4:	bf00      	nop
 80026b6:	370c      	adds	r7, #12
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr

080026c0 <LL_SPI_SetCRCPolynomial>:
{
 80026c0:	b480      	push	{r7}
 80026c2:	b083      	sub	sp, #12
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  WRITE_REG(SPIx->CRCPR, (uint16_t)CRCPoly);
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	461a      	mov	r2, r3
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	611a      	str	r2, [r3, #16]
}
 80026d4:	bf00      	nop
 80026d6:	370c      	adds	r7, #12
 80026d8:	46bd      	mov	sp, r7
 80026da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026de:	4770      	bx	lr

080026e0 <LL_SPI_Init>:
  * @param  SPIx SPI Instance
  * @param  SPI_InitStruct pointer to a @ref LL_SPI_InitTypeDef structure
  * @retval An ErrorStatus enumeration value. (Return always SUCCESS)
  */
ErrorStatus LL_SPI_Init(SPI_TypeDef *SPIx, LL_SPI_InitTypeDef *SPI_InitStruct)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b084      	sub	sp, #16
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	6078      	str	r0, [r7, #4]
 80026e8:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_LL_SPI_NSS(SPI_InitStruct->NSS));
  assert_param(IS_LL_SPI_BAUDRATE(SPI_InitStruct->BaudRate));
  assert_param(IS_LL_SPI_BITORDER(SPI_InitStruct->BitOrder));
  assert_param(IS_LL_SPI_CRCCALCULATION(SPI_InitStruct->CRCCalculation));

  if (LL_SPI_IsEnabled(SPIx) == 0x00000000U)
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f7ff ffc0 	bl	8002674 <LL_SPI_IsEnabled>
 80026f4:	4603      	mov	r3, r0
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d145      	bne.n	8002786 <LL_SPI_Init+0xa6>
     * - NSS management:     SPI_CR1_SSM bit
     * - BaudRate prescaler: SPI_CR1_BR[2:0] bits
     * - BitOrder:           SPI_CR1_LSBFIRST bit
     * - CRCCalculation:     SPI_CR1_CRCEN bit
     */
    MODIFY_REG(SPIx->CR1,
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002702:	f023 03bf 	bic.w	r3, r3, #191	; 0xbf
 8002706:	683a      	ldr	r2, [r7, #0]
 8002708:	6811      	ldr	r1, [r2, #0]
 800270a:	683a      	ldr	r2, [r7, #0]
 800270c:	6852      	ldr	r2, [r2, #4]
 800270e:	4311      	orrs	r1, r2
 8002710:	683a      	ldr	r2, [r7, #0]
 8002712:	68d2      	ldr	r2, [r2, #12]
 8002714:	4311      	orrs	r1, r2
 8002716:	683a      	ldr	r2, [r7, #0]
 8002718:	6912      	ldr	r2, [r2, #16]
 800271a:	4311      	orrs	r1, r2
 800271c:	683a      	ldr	r2, [r7, #0]
 800271e:	6952      	ldr	r2, [r2, #20]
 8002720:	4311      	orrs	r1, r2
 8002722:	683a      	ldr	r2, [r7, #0]
 8002724:	6992      	ldr	r2, [r2, #24]
 8002726:	4311      	orrs	r1, r2
 8002728:	683a      	ldr	r2, [r7, #0]
 800272a:	69d2      	ldr	r2, [r2, #28]
 800272c:	4311      	orrs	r1, r2
 800272e:	683a      	ldr	r2, [r7, #0]
 8002730:	6a12      	ldr	r2, [r2, #32]
 8002732:	430a      	orrs	r2, r1
 8002734:	431a      	orrs	r2, r3
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	601a      	str	r2, [r3, #0]
    /*---------------------------- SPIx CR2 Configuration ------------------------
     * Configure SPIx CR2 with parameters:
     * - DataWidth:          DS[3:0] bits
     * - NSS management:     SSOE bit
     */
    MODIFY_REG(SPIx->CR2,
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	685b      	ldr	r3, [r3, #4]
 800273e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002742:	f023 0304 	bic.w	r3, r3, #4
 8002746:	683a      	ldr	r2, [r7, #0]
 8002748:	6891      	ldr	r1, [r2, #8]
 800274a:	683a      	ldr	r2, [r7, #0]
 800274c:	6952      	ldr	r2, [r2, #20]
 800274e:	0c12      	lsrs	r2, r2, #16
 8002750:	430a      	orrs	r2, r1
 8002752:	431a      	orrs	r2, r3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	605a      	str	r2, [r3, #4]
               SPI_CR2_DS | SPI_CR2_SSOE,
               SPI_InitStruct->DataWidth | (SPI_InitStruct->NSS >> 16U));

    /* Set Rx FIFO to Quarter (1 Byte) in case of 8 Bits mode. No DataPacking by default */
    if (SPI_InitStruct->DataWidth < LL_SPI_DATAWIDTH_9BIT)
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	689b      	ldr	r3, [r3, #8]
 800275c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002760:	d204      	bcs.n	800276c <LL_SPI_Init+0x8c>
    {
      LL_SPI_SetRxFIFOThreshold(SPIx, LL_SPI_RX_FIFO_TH_QUARTER);
 8002762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002766:	6878      	ldr	r0, [r7, #4]
 8002768:	f7ff ff97 	bl	800269a <LL_SPI_SetRxFIFOThreshold>

    /*---------------------------- SPIx CRCPR Configuration ----------------------
     * Configure SPIx CRCPR with parameters:
     * - CRCPoly:            CRCPOLY[15:0] bits
     */
    if (SPI_InitStruct->CRCCalculation == LL_SPI_CRCCALCULATION_ENABLE)
 800276c:	683b      	ldr	r3, [r7, #0]
 800276e:	6a1b      	ldr	r3, [r3, #32]
 8002770:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002774:	d105      	bne.n	8002782 <LL_SPI_Init+0xa2>
    {
      assert_param(IS_LL_SPI_CRC_POLYNOMIAL(SPI_InitStruct->CRCPoly));
      LL_SPI_SetCRCPolynomial(SPIx, SPI_InitStruct->CRCPoly);
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277a:	4619      	mov	r1, r3
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f7ff ff9f 	bl	80026c0 <LL_SPI_SetCRCPolynomial>
    }
    status = SUCCESS;
 8002782:	2300      	movs	r3, #0
 8002784:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8002786:	7bfb      	ldrb	r3, [r7, #15]
}
 8002788:	4618      	mov	r0, r3
 800278a:	3710      	adds	r7, #16
 800278c:	46bd      	mov	sp, r7
 800278e:	bd80      	pop	{r7, pc}

08002790 <LL_USART_IsEnabled>:
{
 8002790:	b480      	push	{r7}
 8002792:	b083      	sub	sp, #12
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE)) ? 1UL : 0UL);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f003 0301 	and.w	r3, r3, #1
 80027a0:	2b01      	cmp	r3, #1
 80027a2:	d101      	bne.n	80027a8 <LL_USART_IsEnabled+0x18>
 80027a4:	2301      	movs	r3, #1
 80027a6:	e000      	b.n	80027aa <LL_USART_IsEnabled+0x1a>
 80027a8:	2300      	movs	r3, #0
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	370c      	adds	r7, #12
 80027ae:	46bd      	mov	sp, r7
 80027b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b4:	4770      	bx	lr

080027b6 <LL_USART_SetStopBitsLength>:
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
 80027be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	685b      	ldr	r3, [r3, #4]
 80027c4:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	431a      	orrs	r2, r3
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	605a      	str	r2, [r3, #4]
}
 80027d0:	bf00      	nop
 80027d2:	370c      	adds	r7, #12
 80027d4:	46bd      	mov	sp, r7
 80027d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027da:	4770      	bx	lr

080027dc <LL_USART_SetHWFlowCtrl>:
{
 80027dc:	b480      	push	{r7}
 80027de:	b083      	sub	sp, #12
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	431a      	orrs	r2, r3
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	609a      	str	r2, [r3, #8]
}
 80027f6:	bf00      	nop
 80027f8:	370c      	adds	r7, #12
 80027fa:	46bd      	mov	sp, r7
 80027fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002800:	4770      	bx	lr

08002802 <LL_USART_SetBaudRate>:
{
 8002802:	b480      	push	{r7}
 8002804:	b087      	sub	sp, #28
 8002806:	af00      	add	r7, sp, #0
 8002808:	60f8      	str	r0, [r7, #12]
 800280a:	60b9      	str	r1, [r7, #8]
 800280c:	607a      	str	r2, [r7, #4]
 800280e:	603b      	str	r3, [r7, #0]
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002816:	d11a      	bne.n	800284e <LL_USART_SetBaudRate+0x4c>
    usartdiv = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8002818:	68bb      	ldr	r3, [r7, #8]
 800281a:	005a      	lsls	r2, r3, #1
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	085b      	lsrs	r3, r3, #1
 8002820:	441a      	add	r2, r3
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	fbb2 f3f3 	udiv	r3, r2, r3
 8002828:	b29b      	uxth	r3, r3
 800282a:	617b      	str	r3, [r7, #20]
    brrtemp = usartdiv & 0xFFF0U;
 800282c:	697a      	ldr	r2, [r7, #20]
 800282e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8002832:	4013      	ands	r3, r2
 8002834:	613b      	str	r3, [r7, #16]
    brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002836:	697b      	ldr	r3, [r7, #20]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	b29b      	uxth	r3, r3
 800283c:	f003 0307 	and.w	r3, r3, #7
 8002840:	693a      	ldr	r2, [r7, #16]
 8002842:	4313      	orrs	r3, r2
 8002844:	613b      	str	r3, [r7, #16]
    USARTx->BRR = brrtemp;
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	693a      	ldr	r2, [r7, #16]
 800284a:	60da      	str	r2, [r3, #12]
}
 800284c:	e00a      	b.n	8002864 <LL_USART_SetBaudRate+0x62>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	085a      	lsrs	r2, r3, #1
 8002852:	68bb      	ldr	r3, [r7, #8]
 8002854:	441a      	add	r2, r3
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	fbb2 f3f3 	udiv	r3, r2, r3
 800285c:	b29b      	uxth	r3, r3
 800285e:	461a      	mov	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	60da      	str	r2, [r3, #12]
}
 8002864:	bf00      	nop
 8002866:	371c      	adds	r7, #28
 8002868:	46bd      	mov	sp, r7
 800286a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286e:	4770      	bx	lr

08002870 <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, const LL_USART_InitTypeDef *USART_InitStruct)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b084      	sub	sp, #16
 8002874:	af00      	add	r7, sp, #0
 8002876:	6078      	str	r0, [r7, #4]
 8002878:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 800287a:	2301      	movs	r3, #1
 800287c:	73fb      	strb	r3, [r7, #15]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800287e:	2300      	movs	r3, #0
 8002880:	60bb      	str	r3, [r7, #8]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f7ff ff84 	bl	8002790 <LL_USART_IsEnabled>
 8002888:	4603      	mov	r3, r0
 800288a:	2b00      	cmp	r3, #0
 800288c:	d15b      	bne.n	8002946 <LL_USART_Init+0xd6>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681a      	ldr	r2, [r3, #0]
 8002892:	4b2f      	ldr	r3, [pc, #188]	; (8002950 <LL_USART_Init+0xe0>)
 8002894:	4013      	ands	r3, r2
 8002896:	683a      	ldr	r2, [r7, #0]
 8002898:	6851      	ldr	r1, [r2, #4]
 800289a:	683a      	ldr	r2, [r7, #0]
 800289c:	68d2      	ldr	r2, [r2, #12]
 800289e:	4311      	orrs	r1, r2
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	6912      	ldr	r2, [r2, #16]
 80028a4:	4311      	orrs	r1, r2
 80028a6:	683a      	ldr	r2, [r7, #0]
 80028a8:	6992      	ldr	r2, [r2, #24]
 80028aa:	430a      	orrs	r2, r1
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	601a      	str	r2, [r3, #0]
    /*---------------------------- USART CR2 Configuration ---------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	4619      	mov	r1, r3
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	f7ff ff7c 	bl	80027b6 <LL_USART_SetStopBitsLength>
    /*---------------------------- USART CR3 Configuration ---------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to
     *   USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80028be:	683b      	ldr	r3, [r7, #0]
 80028c0:	695b      	ldr	r3, [r3, #20]
 80028c2:	4619      	mov	r1, r3
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f7ff ff89 	bl	80027dc <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration ---------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    if (USARTx == USART1)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	4a21      	ldr	r2, [pc, #132]	; (8002954 <LL_USART_Init+0xe4>)
 80028ce:	4293      	cmp	r3, r2
 80028d0:	d104      	bne.n	80028dc <LL_USART_Init+0x6c>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART1_CLKSOURCE);
 80028d2:	2003      	movs	r0, #3
 80028d4:	f7ff fbfe 	bl	80020d4 <LL_RCC_GetUSARTClockFreq>
 80028d8:	60b8      	str	r0, [r7, #8]
 80028da:	e023      	b.n	8002924 <LL_USART_Init+0xb4>
    }
    else if (USARTx == USART2)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	4a1e      	ldr	r2, [pc, #120]	; (8002958 <LL_USART_Init+0xe8>)
 80028e0:	4293      	cmp	r3, r2
 80028e2:	d104      	bne.n	80028ee <LL_USART_Init+0x7e>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART2_CLKSOURCE);
 80028e4:	200c      	movs	r0, #12
 80028e6:	f7ff fbf5 	bl	80020d4 <LL_RCC_GetUSARTClockFreq>
 80028ea:	60b8      	str	r0, [r7, #8]
 80028ec:	e01a      	b.n	8002924 <LL_USART_Init+0xb4>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a1a      	ldr	r2, [pc, #104]	; (800295c <LL_USART_Init+0xec>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d104      	bne.n	8002900 <LL_USART_Init+0x90>
    {
      periphclk = LL_RCC_GetUSARTClockFreq(LL_RCC_USART3_CLKSOURCE);
 80028f6:	2030      	movs	r0, #48	; 0x30
 80028f8:	f7ff fbec 	bl	80020d4 <LL_RCC_GetUSARTClockFreq>
 80028fc:	60b8      	str	r0, [r7, #8]
 80028fe:	e011      	b.n	8002924 <LL_USART_Init+0xb4>
    }
#endif /* USART3 */
#if defined(UART4)
    else if (USARTx == UART4)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	4a17      	ldr	r2, [pc, #92]	; (8002960 <LL_USART_Init+0xf0>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d104      	bne.n	8002912 <LL_USART_Init+0xa2>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART4_CLKSOURCE);
 8002908:	20c0      	movs	r0, #192	; 0xc0
 800290a:	f7ff fcc5 	bl	8002298 <LL_RCC_GetUARTClockFreq>
 800290e:	60b8      	str	r0, [r7, #8]
 8002910:	e008      	b.n	8002924 <LL_USART_Init+0xb4>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a13      	ldr	r2, [pc, #76]	; (8002964 <LL_USART_Init+0xf4>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d104      	bne.n	8002924 <LL_USART_Init+0xb4>
    {
      periphclk = LL_RCC_GetUARTClockFreq(LL_RCC_UART5_CLKSOURCE);
 800291a:	f44f 7040 	mov.w	r0, #768	; 0x300
 800291e:	f7ff fcbb 	bl	8002298 <LL_RCC_GetUARTClockFreq>
 8002922:	60b8      	str	r0, [r7, #8]
       - prescaler value is required
#endif
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8002924:	68bb      	ldr	r3, [r7, #8]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d00d      	beq.n	8002946 <LL_USART_Init+0xd6>
        && (USART_InitStruct->BaudRate != 0U))
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	2b00      	cmp	r3, #0
 8002930:	d009      	beq.n	8002946 <LL_USART_Init+0xd6>
    {
      status = SUCCESS;
 8002932:	2300      	movs	r3, #0
 8002934:	73fb      	strb	r3, [r7, #15]
      LL_USART_SetBaudRate(USARTx,
                           periphclk,
#if defined(USART_PRESC_PRESCALER)
                           USART_InitStruct->PrescalerValue,
#endif /* USART_PRESC_PRESCALER */
                           USART_InitStruct->OverSampling,
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	699a      	ldr	r2, [r3, #24]
                           USART_InitStruct->BaudRate);
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
      LL_USART_SetBaudRate(USARTx,
 800293e:	68b9      	ldr	r1, [r7, #8]
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f7ff ff5e 	bl	8002802 <LL_USART_SetBaudRate>
    LL_USART_SetPrescaler(USARTx, USART_InitStruct->PrescalerValue);
#endif /* USART_PRESC_PRESCALER */
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8002946:	7bfb      	ldrb	r3, [r7, #15]
}
 8002948:	4618      	mov	r0, r3
 800294a:	3710      	adds	r7, #16
 800294c:	46bd      	mov	sp, r7
 800294e:	bd80      	pop	{r7, pc}
 8002950:	efff69f3 	.word	0xefff69f3
 8002954:	40013800 	.word	0x40013800
 8002958:	40004400 	.word	0x40004400
 800295c:	40004800 	.word	0x40004800
 8002960:	40004c00 	.word	0x40004c00
 8002964:	40005000 	.word	0x40005000

08002968 <LL_InitTick>:
  *         configuration by calling this function, for a delay use rather osDelay RTOS service.
  * @param  Ticks Number of ticks
  * @retval None
  */
__STATIC_INLINE void LL_InitTick(uint32_t HCLKFrequency, uint32_t Ticks)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]
  /* Configure the SysTick to have interrupt in 1ms time base */
  SysTick->LOAD  = (uint32_t)((HCLKFrequency / Ticks) - 1UL);  /* set reload register */
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	fbb2 f3f3 	udiv	r3, r2, r3
 800297a:	4a07      	ldr	r2, [pc, #28]	; (8002998 <LL_InitTick+0x30>)
 800297c:	3b01      	subs	r3, #1
 800297e:	6053      	str	r3, [r2, #4]
  SysTick->VAL   = 0UL;                                       /* Load the SysTick Counter Value */
 8002980:	4b05      	ldr	r3, [pc, #20]	; (8002998 <LL_InitTick+0x30>)
 8002982:	2200      	movs	r2, #0
 8002984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002986:	4b04      	ldr	r3, [pc, #16]	; (8002998 <LL_InitTick+0x30>)
 8002988:	2205      	movs	r2, #5
 800298a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_ENABLE_Msk;                   /* Enable the Systick Timer */
}
 800298c:	bf00      	nop
 800298e:	370c      	adds	r7, #12
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr
 8002998:	e000e010 	.word	0xe000e010

0800299c <LL_Init1msTick>:
  * @param  HCLKFrequency HCLK frequency in Hz
  * @note   HCLK frequency can be calculated thanks to RCC helper macro or function @ref LL_RCC_GetSystemClocksFreq
  * @retval None
  */
void LL_Init1msTick(uint32_t HCLKFrequency)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b082      	sub	sp, #8
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  /* Use frequency provided in argument */
  LL_InitTick(HCLKFrequency, 1000U);
 80029a4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f7ff ffdd 	bl	8002968 <LL_InitTick>
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}
	...

080029b8 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b083      	sub	sp, #12
 80029bc:	af00      	add	r7, sp, #0
 80029be:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 80029c0:	4a04      	ldr	r2, [pc, #16]	; (80029d4 <LL_SetSystemCoreClock+0x1c>)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6013      	str	r3, [r2, #0]
}
 80029c6:	bf00      	nop
 80029c8:	370c      	adds	r7, #12
 80029ca:	46bd      	mov	sp, r7
 80029cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d0:	4770      	bx	lr
 80029d2:	bf00      	nop
 80029d4:	20000000 	.word	0x20000000

080029d8 <memset>:
 80029d8:	4402      	add	r2, r0
 80029da:	4603      	mov	r3, r0
 80029dc:	4293      	cmp	r3, r2
 80029de:	d100      	bne.n	80029e2 <memset+0xa>
 80029e0:	4770      	bx	lr
 80029e2:	f803 1b01 	strb.w	r1, [r3], #1
 80029e6:	e7f9      	b.n	80029dc <memset+0x4>

080029e8 <__libc_init_array>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	4d0d      	ldr	r5, [pc, #52]	; (8002a20 <__libc_init_array+0x38>)
 80029ec:	4c0d      	ldr	r4, [pc, #52]	; (8002a24 <__libc_init_array+0x3c>)
 80029ee:	1b64      	subs	r4, r4, r5
 80029f0:	10a4      	asrs	r4, r4, #2
 80029f2:	2600      	movs	r6, #0
 80029f4:	42a6      	cmp	r6, r4
 80029f6:	d109      	bne.n	8002a0c <__libc_init_array+0x24>
 80029f8:	4d0b      	ldr	r5, [pc, #44]	; (8002a28 <__libc_init_array+0x40>)
 80029fa:	4c0c      	ldr	r4, [pc, #48]	; (8002a2c <__libc_init_array+0x44>)
 80029fc:	f000 f818 	bl	8002a30 <_init>
 8002a00:	1b64      	subs	r4, r4, r5
 8002a02:	10a4      	asrs	r4, r4, #2
 8002a04:	2600      	movs	r6, #0
 8002a06:	42a6      	cmp	r6, r4
 8002a08:	d105      	bne.n	8002a16 <__libc_init_array+0x2e>
 8002a0a:	bd70      	pop	{r4, r5, r6, pc}
 8002a0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a10:	4798      	blx	r3
 8002a12:	3601      	adds	r6, #1
 8002a14:	e7ee      	b.n	80029f4 <__libc_init_array+0xc>
 8002a16:	f855 3b04 	ldr.w	r3, [r5], #4
 8002a1a:	4798      	blx	r3
 8002a1c:	3601      	adds	r6, #1
 8002a1e:	e7f2      	b.n	8002a06 <__libc_init_array+0x1e>
 8002a20:	08002ad4 	.word	0x08002ad4
 8002a24:	08002ad4 	.word	0x08002ad4
 8002a28:	08002ad4 	.word	0x08002ad4
 8002a2c:	08002ad8 	.word	0x08002ad8

08002a30 <_init>:
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a32:	bf00      	nop
 8002a34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a36:	bc08      	pop	{r3}
 8002a38:	469e      	mov	lr, r3
 8002a3a:	4770      	bx	lr

08002a3c <_fini>:
 8002a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002a3e:	bf00      	nop
 8002a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002a42:	bc08      	pop	{r3}
 8002a44:	469e      	mov	lr, r3
 8002a46:	4770      	bx	lr
